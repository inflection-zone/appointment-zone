// source: appointment.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.appointment.Appointment', null, global);
goog.exportSymbol('proto.appointment.AppointmentCreateModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentCreateResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentDeleteModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentDeleteResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentGetByIdModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentGetByIdResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentSearchModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentSearchResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentUpdateModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.Appointment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.Appointment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.Appointment.displayName = 'proto.appointment.Appointment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentCreateModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentCreateModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentCreateModel.displayName = 'proto.appointment.AppointmentCreateModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentGetByIdModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentGetByIdModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentGetByIdModel.displayName = 'proto.appointment.AppointmentGetByIdModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentGetByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentGetByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentGetByIdResponse.displayName = 'proto.appointment.AppointmentGetByIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentCreateResponse.displayName = 'proto.appointment.AppointmentCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentUpdateModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentUpdateModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentUpdateModel.displayName = 'proto.appointment.AppointmentUpdateModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentUpdateResponse.displayName = 'proto.appointment.AppointmentUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentSearchModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentSearchModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentSearchModel.displayName = 'proto.appointment.AppointmentSearchModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentSearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentSearchResponse.displayName = 'proto.appointment.AppointmentSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentDeleteModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentDeleteModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentDeleteModel.displayName = 'proto.appointment.AppointmentDeleteModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentDeleteResponse.displayName = 'proto.appointment.AppointmentDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.Appointment.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.Appointment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.Appointment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.Appointment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.Appointment}
 */
proto.appointment.Appointment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.Appointment;
  return proto.appointment.Appointment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.Appointment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.Appointment}
 */
proto.appointment.Appointment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.Appointment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.Appointment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.Appointment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.Appointment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.Appointment.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.Appointment.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.Appointment.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.Appointment.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.Appointment.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.Appointment.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.Appointment.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.Appointment} returns this
 */
proto.appointment.Appointment.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentCreateModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentCreateModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentCreateModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentCreateModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    note: jspb.Message.getFieldWithDefault(msg, 8, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 12, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 13, 0),
    total: jspb.Message.getFieldWithDefault(msg, 14, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentCreateModel}
 */
proto.appointment.AppointmentCreateModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentCreateModel;
  return proto.appointment.AppointmentCreateModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentCreateModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentCreateModel}
 */
proto.appointment.AppointmentCreateModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentCreateModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentCreateModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentCreateModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentCreateModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string BusinessNodeId = 1;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string CustomerId = 2;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string BusinessUserId = 3;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessServiceId = 4;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StartTime = 5;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string EndTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Type = 7;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Note = 8;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string StatusCode = 9;
 * @return {string}
 */
proto.appointment.AppointmentCreateModel.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 Fees = 10;
 * @return {number}
 */
proto.appointment.AppointmentCreateModel.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 Tax = 11;
 * @return {number}
 */
proto.appointment.AppointmentCreateModel.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tip = 12;
 * @return {number}
 */
proto.appointment.AppointmentCreateModel.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Discount = 13;
 * @return {number}
 */
proto.appointment.AppointmentCreateModel.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Total = 14;
 * @return {number}
 */
proto.appointment.AppointmentCreateModel.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bool IsPaid = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentCreateModel.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentCreateModel} returns this
 */
proto.appointment.AppointmentCreateModel.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentGetByIdModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentGetByIdModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentGetByIdModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentGetByIdModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentGetByIdModel}
 */
proto.appointment.AppointmentGetByIdModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentGetByIdModel;
  return proto.appointment.AppointmentGetByIdModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentGetByIdModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentGetByIdModel}
 */
proto.appointment.AppointmentGetByIdModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentGetByIdModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentGetByIdModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentGetByIdModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentGetByIdModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdModel} returns this
 */
proto.appointment.AppointmentGetByIdModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentGetByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentGetByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentGetByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentGetByIdResponse}
 */
proto.appointment.AppointmentGetByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentGetByIdResponse;
  return proto.appointment.AppointmentGetByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentGetByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentGetByIdResponse}
 */
proto.appointment.AppointmentGetByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentGetByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentGetByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentGetByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.AppointmentGetByIdResponse.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentGetByIdResponse} returns this
 */
proto.appointment.AppointmentGetByIdResponse.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentCreateResponse}
 */
proto.appointment.AppointmentCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentCreateResponse;
  return proto.appointment.AppointmentCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentCreateResponse}
 */
proto.appointment.AppointmentCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.AppointmentCreateResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.AppointmentCreateResponse.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.AppointmentCreateResponse.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.AppointmentCreateResponse.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.AppointmentCreateResponse.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.AppointmentCreateResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.AppointmentCreateResponse.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentCreateResponse} returns this
 */
proto.appointment.AppointmentCreateResponse.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentUpdateModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentUpdateModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentUpdateModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentUpdateModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentUpdateModel}
 */
proto.appointment.AppointmentUpdateModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentUpdateModel;
  return proto.appointment.AppointmentUpdateModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentUpdateModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentUpdateModel}
 */
proto.appointment.AppointmentUpdateModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentUpdateModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentUpdateModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentUpdateModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentUpdateModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.AppointmentUpdateModel.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.AppointmentUpdateModel.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.AppointmentUpdateModel.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.AppointmentUpdateModel.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.AppointmentUpdateModel.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.AppointmentUpdateModel.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.AppointmentUpdateModel.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentUpdateModel} returns this
 */
proto.appointment.AppointmentUpdateModel.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentUpdateResponse}
 */
proto.appointment.AppointmentUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentUpdateResponse;
  return proto.appointment.AppointmentUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentUpdateResponse}
 */
proto.appointment.AppointmentUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.AppointmentUpdateResponse.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentUpdateResponse} returns this
 */
proto.appointment.AppointmentUpdateResponse.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentSearchModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentSearchModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentSearchModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentSearchModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromdate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    todate: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentSearchModel}
 */
proto.appointment.AppointmentSearchModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentSearchModel;
  return proto.appointment.AppointmentSearchModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentSearchModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentSearchModel}
 */
proto.appointment.AppointmentSearchModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTodate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentSearchModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentSearchModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentSearchModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentSearchModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromdate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTodate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string businessUserId = 1;
 * @return {string}
 */
proto.appointment.AppointmentSearchModel.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchModel} returns this
 */
proto.appointment.AppointmentSearchModel.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fromDate = 2;
 * @return {string}
 */
proto.appointment.AppointmentSearchModel.prototype.getFromdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchModel} returns this
 */
proto.appointment.AppointmentSearchModel.prototype.setFromdate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string toDate = 3;
 * @return {string}
 */
proto.appointment.AppointmentSearchModel.prototype.getTodate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchModel} returns this
 */
proto.appointment.AppointmentSearchModel.prototype.setTodate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentSearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentSearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentSearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentSearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    businessuserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    businessserviceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fees: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tax: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tip: jspb.Message.getFieldWithDefault(msg, 13, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    total: jspb.Message.getFieldWithDefault(msg, 15, 0),
    ispaid: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentSearchResponse}
 */
proto.appointment.AppointmentSearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentSearchResponse;
  return proto.appointment.AppointmentSearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentSearchResponse}
 */
proto.appointment.AppointmentSearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessuserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessserviceid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFees(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTip(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentSearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentSearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentSearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBusinessuserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBusinessserviceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFees();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTax();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTip();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIspaid();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CustomerId = 3;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getCustomerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setCustomerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BusinessUserId = 4;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getBusinessuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setBusinessuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BusinessServiceId = 5;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getBusinessserviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setBusinessserviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string StartTime = 6;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string EndTime = 7;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Type = 8;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Note = 9;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StatusCode = 10;
 * @return {string}
 */
proto.appointment.AppointmentSearchResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 Fees = 11;
 * @return {number}
 */
proto.appointment.AppointmentSearchResponse.prototype.getFees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setFees = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Tax = 12;
 * @return {number}
 */
proto.appointment.AppointmentSearchResponse.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setTax = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 Tip = 13;
 * @return {number}
 */
proto.appointment.AppointmentSearchResponse.prototype.getTip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setTip = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 Discount = 14;
 * @return {number}
 */
proto.appointment.AppointmentSearchResponse.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 Total = 15;
 * @return {number}
 */
proto.appointment.AppointmentSearchResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool IsPaid = 16;
 * @return {boolean}
 */
proto.appointment.AppointmentSearchResponse.prototype.getIspaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentSearchResponse} returns this
 */
proto.appointment.AppointmentSearchResponse.prototype.setIspaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentDeleteModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentDeleteModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentDeleteModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentDeleteModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentDeleteModel}
 */
proto.appointment.AppointmentDeleteModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentDeleteModel;
  return proto.appointment.AppointmentDeleteModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentDeleteModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentDeleteModel}
 */
proto.appointment.AppointmentDeleteModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentDeleteModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentDeleteModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentDeleteModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentDeleteModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentDeleteModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentDeleteModel} returns this
 */
proto.appointment.AppointmentDeleteModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentDeleteResponse}
 */
proto.appointment.AppointmentDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentDeleteResponse;
  return proto.appointment.AppointmentDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentDeleteResponse}
 */
proto.appointment.AppointmentDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentDeleteResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentDeleteResponse} returns this
 */
proto.appointment.AppointmentDeleteResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.appointment);

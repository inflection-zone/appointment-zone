// source: appointmentstatus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.appointment.AppointmentStatus', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusCreateModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusCreateResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusDeleteModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusDeleteResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusGetByIdModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusGetByIdResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusSearchModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusSearchResponse', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusSearchResponseItem', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusUpdateModel', null, global);
goog.exportSymbol('proto.appointment.AppointmentStatusUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatus.displayName = 'proto.appointment.AppointmentStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusCreateModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusCreateModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusCreateModel.displayName = 'proto.appointment.AppointmentStatusCreateModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusGetByIdModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusGetByIdModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusGetByIdModel.displayName = 'proto.appointment.AppointmentStatusGetByIdModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusGetByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusGetByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusGetByIdResponse.displayName = 'proto.appointment.AppointmentStatusGetByIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusCreateResponse.displayName = 'proto.appointment.AppointmentStatusCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusUpdateModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusUpdateModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusUpdateModel.displayName = 'proto.appointment.AppointmentStatusUpdateModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusUpdateResponse.displayName = 'proto.appointment.AppointmentStatusUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusSearchModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusSearchModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusSearchModel.displayName = 'proto.appointment.AppointmentStatusSearchModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusSearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.appointment.AppointmentStatusSearchResponse.repeatedFields_, null);
};
goog.inherits(proto.appointment.AppointmentStatusSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusSearchResponse.displayName = 'proto.appointment.AppointmentStatusSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusSearchResponseItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusSearchResponseItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusSearchResponseItem.displayName = 'proto.appointment.AppointmentStatusSearchResponseItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusDeleteModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusDeleteModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusDeleteModel.displayName = 'proto.appointment.AppointmentStatusDeleteModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.appointment.AppointmentStatusDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.appointment.AppointmentStatusDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.appointment.AppointmentStatusDeleteResponse.displayName = 'proto.appointment.AppointmentStatusDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatus}
 */
proto.appointment.AppointmentStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatus;
  return proto.appointment.AppointmentStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatus}
 */
proto.appointment.AppointmentStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatus.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatus.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatus.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatus} returns this
 */
proto.appointment.AppointmentStatus.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusCreateModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusCreateModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusCreateModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 5, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 10, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusCreateModel}
 */
proto.appointment.AppointmentStatusCreateModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusCreateModel;
  return proto.appointment.AppointmentStatusCreateModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusCreateModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusCreateModel}
 */
proto.appointment.AppointmentStatusCreateModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusCreateModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusCreateModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusCreateModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string BusinessNodeId = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Status = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string StatusCode = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusColor = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Sequence = 5;
 * @return {number}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool IsCancellationStatus = 6;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool SendNotification = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string NotificationText = 8;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool SendSms = 9;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string SmsText = 10;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool IsDashboardStatus = 11;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool IsCompletedStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsWalkinEntryStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsActive = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateModel.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateModel} returns this
 */
proto.appointment.AppointmentStatusCreateModel.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusGetByIdModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusGetByIdModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusGetByIdModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusGetByIdModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusGetByIdModel}
 */
proto.appointment.AppointmentStatusGetByIdModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusGetByIdModel;
  return proto.appointment.AppointmentStatusGetByIdModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusGetByIdModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusGetByIdModel}
 */
proto.appointment.AppointmentStatusGetByIdModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusGetByIdModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusGetByIdModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusGetByIdModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusGetByIdModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdModel} returns this
 */
proto.appointment.AppointmentStatusGetByIdModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusGetByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusGetByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusGetByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse}
 */
proto.appointment.AppointmentStatusGetByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusGetByIdResponse;
  return proto.appointment.AppointmentStatusGetByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusGetByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse}
 */
proto.appointment.AppointmentStatusGetByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusGetByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusGetByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusGetByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusGetByIdResponse} returns this
 */
proto.appointment.AppointmentStatusGetByIdResponse.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusCreateResponse}
 */
proto.appointment.AppointmentStatusCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusCreateResponse;
  return proto.appointment.AppointmentStatusCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusCreateResponse}
 */
proto.appointment.AppointmentStatusCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusCreateResponse} returns this
 */
proto.appointment.AppointmentStatusCreateResponse.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusUpdateModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusUpdateModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusUpdateModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusUpdateModel}
 */
proto.appointment.AppointmentStatusUpdateModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusUpdateModel;
  return proto.appointment.AppointmentStatusUpdateModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusUpdateModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusUpdateModel}
 */
proto.appointment.AppointmentStatusUpdateModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusUpdateModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusUpdateModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusUpdateModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateModel} returns this
 */
proto.appointment.AppointmentStatusUpdateModel.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusUpdateResponse}
 */
proto.appointment.AppointmentStatusUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusUpdateResponse;
  return proto.appointment.AppointmentStatusUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusUpdateResponse}
 */
proto.appointment.AppointmentStatusUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusUpdateResponse} returns this
 */
proto.appointment.AppointmentStatusUpdateResponse.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusSearchModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusSearchModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusSearchModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusSearchModel}
 */
proto.appointment.AppointmentStatusSearchModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusSearchModel;
  return proto.appointment.AppointmentStatusSearchModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusSearchModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusSearchModel}
 */
proto.appointment.AppointmentStatusSearchModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusSearchModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusSearchModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusSearchModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string businessNodeId = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchModel.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchModel} returns this
 */
proto.appointment.AppointmentStatusSearchModel.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.appointment.AppointmentStatusSearchResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusSearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusSearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    retrievedcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    itemsperpage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    order: jspb.Message.getFieldWithDefault(msg, 5, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.appointment.AppointmentStatusSearchResponseItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusSearchResponse}
 */
proto.appointment.AppointmentStatusSearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusSearchResponse;
  return proto.appointment.AppointmentStatusSearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusSearchResponse}
 */
proto.appointment.AppointmentStatusSearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRetrievedcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageindex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemsperpage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    case 6:
      var value = new proto.appointment.AppointmentStatusSearchResponseItem;
      reader.readMessage(value,proto.appointment.AppointmentStatusSearchResponseItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusSearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRetrievedcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageindex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getItemsperpage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOrder();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.appointment.AppointmentStatusSearchResponseItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 TotalCount = 1;
 * @return {number}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.setTotalcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 RetrievedCount = 2;
 * @return {number}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getRetrievedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.setRetrievedcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 PageIndex = 3;
 * @return {number}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getPageindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.setPageindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 ItemsPerPage = 4;
 * @return {number}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getItemsperpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.setItemsperpage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string Order = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.setOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated AppointmentStatusSearchResponseItem Items = 6;
 * @return {!Array<!proto.appointment.AppointmentStatusSearchResponseItem>}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.appointment.AppointmentStatusSearchResponseItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.appointment.AppointmentStatusSearchResponseItem, 6));
};


/**
 * @param {!Array<!proto.appointment.AppointmentStatusSearchResponseItem>} value
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
*/
proto.appointment.AppointmentStatusSearchResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.appointment.AppointmentStatusSearchResponseItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem}
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.appointment.AppointmentStatusSearchResponseItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.appointment.AppointmentStatusSearchResponse} returns this
 */
proto.appointment.AppointmentStatusSearchResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusSearchResponseItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusSearchResponseItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchResponseItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessnodeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statuscolor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iscancellationstatus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sendnotification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    notificationtext: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsms: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    smstext: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdashboardstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    iscompletedstatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    iswalkinentrystatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedat: (f = msg.getUpdatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    deletedat: (f = msg.getDeletedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem}
 */
proto.appointment.AppointmentStatusSearchResponseItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusSearchResponseItem;
  return proto.appointment.AppointmentStatusSearchResponseItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusSearchResponseItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem}
 */
proto.appointment.AppointmentStatusSearchResponseItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscolor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscancellationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendnotification(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationtext(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendsms(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmstext(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdashboardstatus(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscompletedstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswalkinentrystatus(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 17:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedat(value);
      break;
    case 18:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeletedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusSearchResponseItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusSearchResponseItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusSearchResponseItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessnodeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatuscolor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIscancellationstatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSendnotification();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotificationtext();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsms();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSmstext();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdashboardstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIscompletedstatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIswalkinentrystatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedat();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDeletedat();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BusinessNodeId = 2;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getBusinessnodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setBusinessnodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Status = 3;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StatusCode = 4;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string StatusColor = 5;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getStatuscolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setStatuscolor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Sequence = 6;
 * @return {number}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool IsCancellationStatus = 7;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getIscancellationstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setIscancellationstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool SendNotification = 8;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getSendnotification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setSendnotification = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string NotificationText = 9;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getNotificationtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setNotificationtext = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool SendSms = 10;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getSendsms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setSendsms = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string SmsText = 11;
 * @return {string}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getSmstext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setSmstext = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsDashboardStatus = 12;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getIsdashboardstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setIsdashboardstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool IsCompletedStatus = 13;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getIscompletedstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setIscompletedstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool IsWalkinEntryStatus = 14;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getIswalkinentrystatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setIswalkinentrystatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool IsActive = 15;
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional google.protobuf.Timestamp CreatedAt = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
*/
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setCreatedat = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.clearCreatedat = function() {
  return this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional google.protobuf.Timestamp UpdatedAt = 17;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getUpdatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 17));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
*/
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setUpdatedat = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.clearUpdatedat = function() {
  return this.setUpdatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.hasUpdatedat = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional google.protobuf.Timestamp DeletedAt = 18;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.getDeletedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 18));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
*/
proto.appointment.AppointmentStatusSearchResponseItem.prototype.setDeletedat = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.appointment.AppointmentStatusSearchResponseItem} returns this
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.clearDeletedat = function() {
  return this.setDeletedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.appointment.AppointmentStatusSearchResponseItem.prototype.hasDeletedat = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusDeleteModel.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusDeleteModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusDeleteModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusDeleteModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusDeleteModel}
 */
proto.appointment.AppointmentStatusDeleteModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusDeleteModel;
  return proto.appointment.AppointmentStatusDeleteModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusDeleteModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusDeleteModel}
 */
proto.appointment.AppointmentStatusDeleteModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusDeleteModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusDeleteModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusDeleteModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusDeleteModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.appointment.AppointmentStatusDeleteModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.appointment.AppointmentStatusDeleteModel} returns this
 */
proto.appointment.AppointmentStatusDeleteModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.appointment.AppointmentStatusDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.appointment.AppointmentStatusDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.appointment.AppointmentStatusDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.appointment.AppointmentStatusDeleteResponse}
 */
proto.appointment.AppointmentStatusDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.appointment.AppointmentStatusDeleteResponse;
  return proto.appointment.AppointmentStatusDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.appointment.AppointmentStatusDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.appointment.AppointmentStatusDeleteResponse}
 */
proto.appointment.AppointmentStatusDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.appointment.AppointmentStatusDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.appointment.AppointmentStatusDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.appointment.AppointmentStatusDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.appointment.AppointmentStatusDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.appointment.AppointmentStatusDeleteResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.appointment.AppointmentStatusDeleteResponse} returns this
 */
proto.appointment.AppointmentStatusDeleteResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.appointment);

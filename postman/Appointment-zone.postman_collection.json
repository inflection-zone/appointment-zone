{
	"info": {
		"_postman_id": "152a1714-19cd-49cc-9aa0-157cf0b6a1b9",
		"name": "Appointment-zone",
		"description": "**The Appointment Service is a key module in the system, designed to handle scheduling and management of appointments between customers and businesses. It facilitates the seamless coordination of services, customers, and business users, ensuring an efficient and reliable booking process.**\n\n**Core Features:**\n\n1. **Appointment Management**\n    \n2. **Appointment Status Tracking**\n    \n3. **Customer Interaction**\n    \n4. **Notification System**\n    \n5. **Integration with Business Entities**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29959603",
		"_collection_link": "https://www.postman.com/blue-astronaut-524113/workspace/appointment-zone/collection/29959603-152a1714-19cd-49cc-9aa0-157cf0b6a1b9?action=share&source=collection_link&creator=29959603"
	},
	"item": [
		{
			"name": "Service health-check",
			"item": [
				{
					"name": "Health-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('message');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}",
							"host": [
								"{{BASE_URL}}"
							]
						},
						"description": "This request will be used by API monitor to check the health of the service."
					},
					"response": []
				}
			],
			"description": "API to check the health of the service."
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var roles = jsonRes.Data.RoleTypes;\r",
									"    for (var i = 0; i < roles.length; i++) {\r",
									"        var role = roles[i];\r",
									"        var roleName = role.RoleName;\r",
									"        pm.environment.set(roleName.toUpperCase() + \"_ROLE_ID\", role.id);\r",
									"    }\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('RoleTypes');\r",
									"    pm.expect(jsonRes.Data.RoleTypes.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/types/roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"types",
								"roles"
							]
						},
						"description": "This request will be used by API monitor to get the role of service user."
					},
					"response": []
				}
			],
			"description": "This folder is used to retrive the role of a service user."
		},
		{
			"name": "Admin login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ADMIN_PASSWORD\", \"$FG&2*(CV!X\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"ADMIN_JWT\", jsonRes.Data.AccessToken);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Admin login: Access token is returned\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('AccessToken');\r",
									"    pm.expect(jsonRes.Data.AccessToken).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\" : \"admin\",\r\n    \"Password\" : \"{{PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login-password"
							]
						},
						"description": "This request will be used by API to login to the service."
					},
					"response": []
				}
			],
			"description": "This folder is for Authentication purpose."
		},
		{
			"name": "Api client",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", jsonRes.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"    pm.expect(jsonRes.Data.IsPrivileged).equals(true);\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals(\"+91\");\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"var password = \"Test@123\";\r",
									"pm.environment.set(\"API_CLIENT_PASSWORD\", password);\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									"pm.environment.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "This request will be used by API client to Add the API client."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is retrived', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "This request will be used by API Client to retrive the API Client by ID."
					},
					"response": []
				},
				{
					"name": "Search with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client search results are returned', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).greaterThan(0);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/search?clientName=rean",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"search"
							],
							"query": [
								{
									"key": "clientCode",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "clientInterfaceType",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "isPrivileged",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "countryCode",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "email",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validFrom",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "validTill",
									"value": "xyz",
									"disabled": true
								},
								{
									"key": "clientName",
									"value": "rean"
								}
							]
						},
						"description": "This request will be used by API Client to search the data by applying filters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is updated', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    \r",
									"    pm.expect(jsonRes.Data.ClientName).equals('Rean Patient App X');\r",
									"    pm.expect(jsonRes.Data.IsPrivileged).equals(false);\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals('+91');\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"\r",
									"var email = pm.environment.get(\"EMAIL\");\r",
									"email = email.replace(\"@gmail.com\", \"@inflectionzone.com\");\r",
									"pm.environment.set(\"EMAIL\", email);\r",
									"\r",
									"var today = (new Date()).toISOString().split('T')[0];\r",
									"pm.environment.set(\"TODAY\", today);\r",
									"\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"function formatDate(date) {\r",
									"    var d = new Date(date),\r",
									"        month = '' + (d.getMonth() + 1),\r",
									"        day = '' + d.getDate(),\r",
									"        year = d.getFullYear();\r",
									"\r",
									"    if (month.length < 2) \r",
									"        month = '0' + month;\r",
									"    if (day.length < 2) \r",
									"        day = '0' + day;\r",
									"\r",
									"    return [year, month, day].join('-');\r",
									"}\r",
									"\r",
									"var toDate = formatDate((new Date()).addDays(365));\r",
									"\r",
									"pm.environment.set(\"TO_DATE\", toDate);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App X\",\r\n    \"ClientInterfaceType\": \"Mobile App\",\r\n    \"IsPrivileged\": false,\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"ValidFrom\": \"2023-09-06T11:23:17.000Z\",\r\n    \"ValidTill\": \"2024-03-04T11:23:17.000Z\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "This request will be used by API Client to update previous data of API client."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('Api client record is deleted', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_ID}}"
							]
						},
						"description": "This request will be used by API Client to remove the perticular API Client by providing id of that client."
					},
					"response": []
				},
				{
					"name": "Create API client again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var respData = pm.response.json();\r",
									"    pm.environment.set(\"API_CLIENT_ID\", respData.Data.id);\r",
									"    pm.environment.set(\"API_CLIENT_CODE\", respData.Data.ClientCode);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test('Request is successfull', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test('New api client record is created', function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPrivileged');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CountryCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Phone');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.ClientName).equals(\"Rean Patient App\");\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsPrivileged).equals(true);\r",
									"    pm.expect(jsonRes.Data.CountryCode).equals(\"+91\");\r",
									"    pm.expect(jsonRes.Data.Phone).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClientName\": \"Rean Patient App\",\r\n    \"ClientInterfaceType\": \"Web App\",\r\n    \"CountryCode\": \"+91\",\r\n    \"Phone\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"IsPrivileged\": true,\r\n    \"Password\": \"{{API_CLIENT_PASSWORD}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients"
							]
						},
						"description": "This request will be used by API Client to add API Client again."
					},
					"response": []
				},
				{
					"name": "Get current API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Api key is returned\", function () {\r",
									"\r",
									"    var expectedClientCode = pm.environment.get(\"API_CLIENT_CODE\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ClientCode).equals(expectedClientCode);\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/current-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"current-api-key"
							]
						},
						"description": "Get the current valid API key for a given client. \n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				},
				{
					"name": "Renew API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"        pm.environment.set(\"API_KEY\", respData.Data.ApiKeyDetails.ApiKey);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"New api key is returned\", function () {\r",
									"\r",
									"    var currentApiKey = pm.environment.get(\"API_KEY\");\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('ApiKeyDetails');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails).to.have.property('ClientCode');\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).to.not.be.empty;\r",
									"    pm.expect(jsonRes.Data.ApiKeyDetails.ApiKey).not.equals(currentApiKey);\r",
									"    \r",
									"    //set the new key to env\r",
									"    pm.environment.set(\"API_KEY\", jsonRes.Data.ApiKeyDetails.ApiKey);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{API_CLIENT_CODE}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{API_CLIENT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ValidFrom\": \"2023-09-21T11:27:42.687Z\",\r\n    \"ValidTill\": \"2024-09-21T11:27:42.687Z\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api-clients/{{API_CLIENT_CODE}}/renew-api-key",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api-clients",
								"{{API_CLIENT_CODE}}",
								"renew-api-key"
							]
						},
						"description": "Renew API key with a given validity period. If not added, the key will be valid for 1 year.\n\nThis API uses basic authentication with Username and Password. As a username, one has to add 'Client code' generated during the registration."
					},
					"response": []
				}
			],
			"description": "This folder is used for perform CRUD operations on API Client."
		},
		{
			"name": "Business",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_ID\", jsonRes.Data.BusinessRecords.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('AboutUs');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Logo');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Yelp');\r",
									"\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.ExternalId).equals(\"1\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Name).equals(\"Ayurcare private limited\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.AboutUs).equals(\"Blending Ayurveda with modern medicine\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Logo).equals(\"ojiio\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.DisplayPicture).equals(\"jojioiuiipipiopi\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Address).equals(\"91 Springboard, Pune, Maharashtra, India\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Facebook).equals(\"facebook.com/Ayurcare\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Twitter).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Linkedin).equals(\"bdshbdbv\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Instagram).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Yelp).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ExternalId\" :\"1\",\r\n    \"Name\" : \"Ayurcare private limited\",\r\n    \"Mobile\" :\"{{PHONE_NUMBER}}\",\r\n    \"Email\" : \"{{EMAIL}}\",\r\n    \"AboutUs\" :\"Blending Ayurveda with modern medicine\",\r\n    \"ApiKey\" :\"{{x-api-key}}\",\r\n    \"Logo\" :\"ojiio\",\r\n    \"DisplayPicture\":\"jojioiuiipipiopi\",\r\n    \"Address\": \"91 Springboard, Pune, Maharashtra, India\",\r\n    \"Facebook\":\"facebook.com/Ayurcare\",\r\n    \"Twitter\":\"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\":\"bdshbdbv\",\r\n    \"Instagram\":\"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/businesses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses"
							]
						},
						"description": "This request will be used by API Admin to create/add the business information."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AboutUs');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Logo');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/businesses/{{BUSINESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses",
								"{{BUSINESS_ID}}"
							]
						},
						"description": "This request will be used by API Admin to get business related details by Id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/businesses/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses",
								"search"
							],
							"query": [
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "This request will be used by API Admin to search the Business by applying filters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals('Excel Tech private limited');\r",
									"    pm.expect(jsonRes.Data.Mobile).equals(pm.environment.get('PHONE_NUMBER'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"Excel Tech private limited\",\r\n    \"Mobile\" : \"{{PHONE_NUMBER}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/businesses/{{BUSINESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses",
								"{{BUSINESS_ID}}"
							]
						},
						"description": "This request will be used by API Admin to update the previous business by giving perticular business id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/businesses/{{BUSINESS_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses",
								"{{BUSINESS_ID}}"
							]
						},
						"description": "This request will be used by API Admin to remove the business by providing perticular id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_ID\", jsonRes.Data.BusinessRecords.id);\r",
									"  \r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('AboutUs');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Logo');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data.BusinessRecords).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.ExternalId).equals(\"1\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Name).equals(\"Ayurcare private limited\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.AboutUs).equals(\"Blending Ayurveda with modern medicine\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Logo).equals(\"ojiio\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.DisplayPicture).equals(\"jojioiuiipipiopi\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Address).equals(\"91 Springboard, Pune, Maharashtra, India\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Facebook).equals(\"facebook.com/Ayurcare\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Twitter).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Linkedin).equals(\"bdshbdbv\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Instagram).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.BusinessRecords.Yelp).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ExternalId\" :\"1\",\r\n    \"Name\" : \"Ayurcare private limited\",\r\n    \"Mobile\" :\"{{PHONE_NUMBER}}\",\r\n    \"Email\" : \"{{EMAIL}}\",\r\n    \"AboutUs\" :\"Blending Ayurveda with modern medicine\",\r\n    \"ApiKey\" :\"{{x-api-key}}\",\r\n    \"Logo\" :\"ojiio\",\r\n    \"DisplayPicture\":\"jojioiuiipipiopi\",\r\n    \"Address\": \"91 Springboard, Pune, Maharashtra, India\",\r\n    \"OverallRating\":3.5,\r\n    \"Facebook\":\"facebook.com/Ayurcare\",\r\n    \"Twitter\":\"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\":\"bdshbdbv\",\r\n    \"Instagram\":\"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\",\r\n    \"IsActive\":true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/businesses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"businesses"
							]
						},
						"description": "This request will be used by API Admin to add another business."
					},
					"response": []
				}
			],
			"description": "**APIs related to managing businesses. These endpoints allow creating, retrieving, updating, deleting, and searching businesses. A business is a core entity in the appointment system, representing an organization or service provider.**\n\nExample: If we want to book appointment for doctor as a patient then **HOSPITAL** is a business."
		},
		{
			"name": "Business-node",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_ID_1\", jsonRes.Data.Node.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('BusinessId');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Lattitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowWalkinAppointments');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowFutureBookingFor');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Node.Name).equals(\"Pune-Hadapsar branch\");\r",
									"    pm.expect(jsonRes.Data.Node.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Node.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Node.DisplayPicture).equals(\"Ironman\");\r",
									"    pm.expect(jsonRes.Data.Node.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.Node.Longitude).equals('23.3');\r",
									"    pm.expect(jsonRes.Data.Node.Lattitude).equals('76.89');\r",
									"    pm.expect(jsonRes.Data.Node.OverallRating).equals(4);\r",
									"    pm.expect(jsonRes.Data.Node.AllowWalkinAppointments).equals(true);\r",
									"    pm.expect(jsonRes.Data.Node.AllowFutureBookingFor).equals(\"60d\");\r",
									"    pm.expect(jsonRes.Data.Node.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"BusinessId\":\"{{BUSINESS_ID}}\",\r\n    \"Name\": \"Pune-Hadapsar branch\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"DisplayPicture\": \"Ironman\",\r\n    \"Address\": \"Pune\",\r\n    \"Longitude\":\"23.3\",\r\n    \"Lattitude\":\"76.89\",\r\n    \"OverallRating\": 4,\r\n    \"AllowWalkinAppointments\": false,\r\n    \"AllowFutureBookingFor\": \"60d\",\r\n    \"IsActive\": true\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-nodes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes"
							]
						},
						"description": "This request will be used by API Admin to add the business node/location."
					},
					"response": []
				},
				{
					"name": "Create another",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_ID_2\", jsonRes.Data.Node.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('BusinessId');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Lattitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowWalkinAppointments');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowFutureBookingFor');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Node.Name).equals(\"Pune-Hadapsar branch\");\r",
									"    pm.expect(jsonRes.Data.Node.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Node.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Node.DisplayPicture).equals(\"Ironman\");\r",
									"    pm.expect(jsonRes.Data.Node.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.Node.Longitude).equals('23.3');\r",
									"    pm.expect(jsonRes.Data.Node.Lattitude).equals('76.89');\r",
									"    pm.expect(jsonRes.Data.Node.OverallRating).equals(4);\r",
									"    pm.expect(jsonRes.Data.Node.AllowWalkinAppointments).equals(true);\r",
									"    pm.expect(jsonRes.Data.Node.AllowFutureBookingFor).equals(\"60d\");\r",
									"    pm.expect(jsonRes.Data.Node.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {  \"BusinessId\":\"{{BUSINESS_ID}}\",\r\n    \"Name\": \"Pune-Hadapsar branch\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"DisplayPicture\": \"Ironman\",\r\n    \"Address\": \"Pune\",\r\n    \"Longitude\":\"23.3\",\r\n    \"Lattitude\":\"76.89\",\r\n    \"OverallRating\": 4,\r\n    \"AllowWalkinAppointments\": false,\r\n    \"AllowFutureBookingFor\": \"60d\",\r\n    \"IsActive\": true\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-nodes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes"
							]
						},
						"description": "This request will be used by API Admin to add another business node."
					},
					"response": []
				},
				{
					"name": "Create one more",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_ID_3\", jsonRes.Data.Node.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('BusinessId');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Lattitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowWalkinAppointments');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowFutureBookingFor');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Node.Name).equals(\"Pune-Chinchwad branch\");\r",
									"    pm.expect(jsonRes.Data.Node.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Node.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Node.DisplayPicture).equals(\"Ironman\");\r",
									"    pm.expect(jsonRes.Data.Node.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.Node.Longitude).equals('23.3');\r",
									"    pm.expect(jsonRes.Data.Node.Lattitude).equals('76.89');\r",
									"    pm.expect(jsonRes.Data.Node.OverallRating).equals(4);\r",
									"    pm.expect(jsonRes.Data.Node.AllowWalkinAppointments).equals(true);\r",
									"    pm.expect(jsonRes.Data.Node.AllowFutureBookingFor).equals(\"60d\");\r",
									"    pm.expect(jsonRes.Data.Node.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessId\":\"{{BUSINESS_ID}}\",\r\n    \"Name\": \"Pune-Chinchwad branch\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"DisplayPicture\": \"Ironman\",\r\n    \"Address\": \"Pune\",\r\n    \"Longitude\":\"23.3\",\r\n    \"Lattitude\":\"76.89\",\r\n    \"OverallRating\": 4,\r\n    \"AllowWalkinAppointments\": false,\r\n    \"AllowFutureBookingFor\": \"60d\",\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-nodes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes"
							]
						},
						"description": "This request will be used by API Admin to add one more business node."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// try {\r",
									"//     var jsonRes = pm.response.json();\r",
									"//     pm.environment.set(\"BUSINESS_NODE_ID_1\", jsonRes.Data.Node.id);\r",
									"//     //pm.environment.set(\"BUSINESS_ID\", jsonRes.Data.BusinessRecords.id);\r",
									"// }\r",
									"// catch (error) {\r",
									"//     console.log(error.message);\r",
									"// }\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowWalkinAppointments');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowFutureBookingFor');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-nodes/{{BUSINESS_NODE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes",
								"{{BUSINESS_NODE_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to get business node by perticular id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-nodes/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "hadapsar",
									"disabled": true
								}
							]
						},
						"description": "This request will be used by API Admin to search business node by filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals('Pune-Hadapsar Branch, Pune-Solapur highway');\r",
									"    pm.expect(jsonRes.Data.Mobile).equals(pm.environment.get('PHONE_NUMBER'));   \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"Name\": \"Pune-Hadapsar Branch, Pune-Solapur highway\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-nodes/{{BUSINESS_NODE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes",
								"{{BUSINESS_NODE_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to edit existing business node by perticular id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-nodes/{{BUSINESS_NODE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes",
								"{{BUSINESS_NODE_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to remove business node by perticular id."
					},
					"response": []
				},
				{
					"name": "CreateAgain",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_ID\", jsonRes.Data.Node.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('BusinessId');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Longitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('Lattitude');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowWalkinAppointments');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('AllowFutureBookingFor');\r",
									"    pm.expect(jsonRes.Data.Node).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Node.Name).equals(\"Pune-kothrud branch\");\r",
									"    pm.expect(jsonRes.Data.Node.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Node.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Node.DisplayPicture).equals(\"Ironman\");\r",
									"    pm.expect(jsonRes.Data.Node.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.Node.Longitude).equals('23.3');\r",
									"    pm.expect(jsonRes.Data.Node.Lattitude).equals('76.89');\r",
									"    pm.expect(jsonRes.Data.Node.AllowWalkinAppointments).equals(true);\r",
									"    pm.expect(jsonRes.Data.Node.AllowFutureBookingFor).equals(\"60d\");\r",
									"    pm.expect(jsonRes.Data.Node.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessId\":\"{{BUSINESS_ID}}\",\r\n    \"Name\": \"Pune-kothrud branch\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"DisplayPicture\": \"Ironman\",\r\n    \"Address\": \"Pune\",\r\n    \"Longitude\":\"23.3\",\r\n    \"Lattitude\":\"76.89\",\r\n    \"AllowWalkinAppointments\": false,\r\n    \"AllowFutureBookingFor\": \"60d\",\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-nodes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-nodes"
							]
						},
						"description": "This request will be used by API Admin to add business node again."
					},
					"response": []
				}
			],
			"description": "**APIs for managing business nodes. Business nodes are subunits of a business (e.g., branches or locations). These endpoints handle creating, updating, deleting, retrieving, and searching nodes.**\n\nExample: If Hospital is a business then various branches of that hospital are nothing but the business node."
		},
		{
			"name": "Business-user",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_ID_1\", jsonRes.Data.UserRecords.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Dob');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('AboutMe');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Qualification');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Experience');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsAvailableForEmergency');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.UserRecords.FirstName).equals('Sachin');\r",
									"    pm.expect(jsonRes.Data.UserRecords.LastName).equals('Tendulkar');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Prefix).equals('Mr.');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Dob).equals('1970-01-01T00:00:00.000Z');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Gender).equals('Male');\r",
									"    pm.expect(jsonRes.Data.UserRecords.DisplayPicture).equals('jjkbjbbhj gj jhj');\r",
									"    pm.expect(jsonRes.Data.UserRecords.AboutMe).equals('Nothing special, just a cricketer');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Qualification).equals('Diploma in pebbles counting');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Experience).equals('24 years');\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsAvailableForEmergency).equals(true);\r",
									"    pm.expect(jsonRes.Data.UserRecords.Facebook).equals('kopiwodiewiewiiewiwjde');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Linkedin).equals('kopiwodiewiewiiewiwjde');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Twitter).equals('kopiwodiewiewiiewiwjde');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Instagram).equals('kopiwodiewiewiiewiwjde');\r",
									"    pm.expect(jsonRes.Data.UserRecords.Yelp).equals('kopiwodiewiewiiewiwjde');\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Dob\": \"1974-04-24\",\r\n    \"Gender\": \"Male\",\r\n    \"DisplayPicture\": \"jjkbjbbhj gj jhj\",\r\n    \"AboutMe\": \"Nothing special, just a cricketer\",\r\n    \"Qualification\": \"Diploma in pebbles counting\",\r\n    \"Experience\": \"24 years\",\r\n    \"IsAvailableForEmergency\": false,\r\n    \"Facebook\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Twitter\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Instagram\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\",\r\n    \"IsActive\": true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users"
							]
						},
						"description": "This request will be used by API Admin to add business user details."
					},
					"response": []
				},
				{
					"name": "Create another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_ID_2\", jsonRes.Data.UserRecords.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Dob');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('AboutMe');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Qualification');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Experience');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsAvailableForEmergency');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.UserRecords.FirstName).equals(\"Kundlik\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.LastName).equals(\"Kharade\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Prefix).equals(\"Dr.\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Dob).equals(\"1970-01-01T00:00:00.000Z\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Gender).equals(\"M\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.DisplayPicture).equals(\"jjkbjbbhj gj jhj\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.AboutMe).equals(\"I have been engaged in all kinds of Surgery (thyroid glands, mammary glands, esophageal diseases, gastrointestinal diseases, hepatobiliary and pancreatic diseases, vascular diseases, and endoscopic surgery), emergency, and anesthesia works for about 20 years.\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Qualification).equals(\"Diploma in pebbles counting\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Experience).equals(\"15 years\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsAvailableForEmergency).equals(true);\r",
									"    pm.expect(jsonRes.Data.UserRecords.Facebook).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Linkedin).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Twitter).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Instagram).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Yelp).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_2}}\",\r\n    \"FirstName\": \"Kundlik\",\r\n    \"LastName\": \"Kharade\",\r\n    \"Prefix\": \"Dr.\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Dob\": \"1975-04-11\",\r\n    \"Gender\": \"M\",\r\n    \"DisplayPicture\": \"jjkbjbbhj gj jhj\",\r\n    \"AboutMe\": \"I have been engaged in all kinds of Surgery (thyroid glands, mammary glands, esophageal diseases, gastrointestinal diseases, hepatobiliary and pancreatic diseases, vascular diseases, and endoscopic surgery), emergency, and anesthesia works for about 20 years.\",\r\n    \"Qualification\": \"Diploma in pebbles counting\",\r\n    \"Experience\": \"15 years\",\r\n    \"IsAvailableForEmergency\": false,\r\n    \"Facebook\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Twitter\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Instagram\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\",\r\n    \"IsActive\": true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users"
							]
						},
						"description": "This request will be used by API Admin to add another business user details."
					},
					"response": []
				},
				{
					"name": "Create one another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_ID_3\", jsonRes.Data.UserRecords.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Dob');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('AboutMe');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Qualification');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Experience');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsAvailableForEmergency');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.UserRecords.FirstName).equals(\"Deva\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.LastName).equals(\"Kharade\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Prefix).equals(\"Dr.\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Dob).equals(\"1970-01-01T00:00:00.000Z\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Gender).equals(\"M\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.DisplayPicture).equals(\"jjkbjbbhj gj jhj\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.AboutMe).equals(\"Consultant Nephrologists Ruby Hall Clinic, Pune (Aug 1995 Onwards)\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Qualification).equals(\"Diploma in pebbles counting\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Experience).equals(\"15 years\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsAvailableForEmergency).equals(true);\r",
									"    pm.expect(jsonRes.Data.UserRecords.Facebook).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Linkedin).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Twitter).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Instagram).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Yelp).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_3}}\",\r\n    \"FirstName\": \"Deva\",\r\n    \"LastName\": \"Kharade\",\r\n    \"Prefix\": \"Dr.\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Dob\": \"1975-04-11\",\r\n    \"Gender\": \"M\",\r\n    \"DisplayPicture\": \"jjkbjbbhj gj jhj\",\r\n    \"AboutMe\": \"Consultant Nephrologists Ruby Hall Clinic, Pune (Aug 1995 Onwards)\",\r\n    \"Qualification\": \"Diploma in pebbles counting\",\r\n    \"Experience\": \"15 years\",\r\n    \"IsAvailableForEmergency\": false,\r\n    \"Facebook\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Twitter\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Instagram\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\",\r\n    \"IsActive\": true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users"
							]
						},
						"description": "This request will be used by API Admin to add another business user details."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Dob');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AboutMe');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Qualification');\r",
									"    pm.expect(jsonRes.Data).to.have.property('OverallRating');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Experience');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsAvailableForEmergency');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-users/{{BUSINESS_USER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users",
								"{{BUSINESS_USER_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to get business user details by perticular id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-users/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users",
								"search"
							],
							"query": [
								{
									"key": "businessNodeId",
									"value": "{{BUSINESS_NODE_ID}}",
									"disabled": true
								}
							]
						},
						"description": "This request will be used by API Admin to search business user details by perticular search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsAvailableForEmergency');\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsAvailableForEmergency).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"IsAvailableForEmergency\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-users/{{BUSINESS_USER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users",
								"{{BUSINESS_USER_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to edit business user details by perticular id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-users/{{BUSINESS_USER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users",
								"{{BUSINESS_USER_ID_1}}"
							]
						},
						"description": "This request will be used by API Admin to remove business user details by perticular id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_ID\", jsonRes.Data.UserRecords.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Dob');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('AboutMe');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Qualification');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Experience');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsAvailableForEmergency');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Facebook');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Linkedin');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Twitter');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Instagram');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('Yelp');\r",
									"    pm.expect(jsonRes.Data.UserRecords).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.UserRecords.FirstName).equals(\"Sachin\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.LastName).equals(\"Tendulkar\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Prefix).equals(\"Mr.\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.UserRecords.Dob).equals(\"1970-01-01T00:00:00.000Z\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Gender).equals(\"M\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.DisplayPicture).equals(\"jjkbjbbhj gj jhj\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.AboutMe).equals(\"Nothing special, just a cricketer\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Qualification).equals(\"Diploma in pebbles counting\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Experience).equals(\"24 years\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsAvailableForEmergency).equals(true);\r",
									"    pm.expect(jsonRes.Data.UserRecords.Facebook).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Linkedin).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Twitter).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Instagram).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.Yelp).equals(\"kopiwodiewiewiiewiwjde\");\r",
									"    pm.expect(jsonRes.Data.UserRecords.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"FirstName\": \"Sachin\",\r\n    \"LastName\": \"Tendulkar\",\r\n    \"Prefix\": \"Mr.\",\r\n    \"Mobile\": \"{{PHONE_NUMBER}}\",\r\n    \"Email\": \"{{EMAIL}}\",\r\n    \"Dob\": \"1974-04-24\",\r\n    \"Gender\": \"M\",\r\n    \"DisplayPicture\": \"jjkbjbbhj gj jhj\",\r\n    \"AboutMe\": \"Nothing special, just a cricketer\",\r\n    \"Qualification\": \"Diploma in pebbles counting\",\r\n    \"Experience\": \"24 years\",\r\n    \"IsAvailableForEmergency\": true,\r\n    \"Facebook\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Linkedin\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Twitter\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Instagram\": \"kopiwodiewiewiiewiwjde\",\r\n    \"Yelp\": \"kopiwodiewiewiiewiwjde\",\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-users"
							]
						},
						"description": "This request will be used by API Admin to add business user details again."
					},
					"response": []
				}
			],
			"description": "**APIs to manage users associated with a business. These could include employees or staff members. Use these endpoints to create, update, delete, retrieve, or search for business users.**\n\nExample: If **Hospotal** is a business then **Doctor** is a user for that Hospital."
		},
		{
			"name": "Business-service",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SERVICE_ID_1\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"Cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.ServiceDuration).equals(\"30m\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(0.0);\r",
									"    pm.expect(jsonRes.Data.IsTaxable).equals(true);\r",
									"    pm.expect(jsonRes.Data.TaxRate).equals(30.0);\r",
									"    pm.expect(jsonRes.Data.PaymentRequired).equals(false);\r",
									"    pm.expect(jsonRes.Data.PaymentPercent).equals(25);\r",
									"    pm.expect(jsonRes.Data.PriorBookingWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.SendReminder).equals(true);\r",
									"    pm.expect(jsonRes.Data.ReminderWindow).equals(\"4h\");\r",
									"    pm.expect(jsonRes.Data.ReminderType).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.AllowCancellation).equals(false);\r",
									"    pm.expect(jsonRes.Data.CancellationWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.CancellationCharges).equals(20.0);\r",
									"    pm.expect(jsonRes.Data.EnableLoyalty).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"Name\": \"Cardiac Care\",\r\n    \"Description\": \"cardiac Care\",\r\n    \"ServiceDuration\": \"30m\",\r\n    \"Fees\": 0.0,\r\n    \"IsTaxable\": true,\r\n    \"TaxRate\": 30.0,\r\n    \"PaymentRequired\": false,\r\n    \"PaymentPercent\": 25,\r\n    \"PriorBookingWindow\": \"2h\",\r\n    \"SendReminder\": true,\r\n    \"ReminderWindow\": \"4h\",\r\n    \"ReminderType\": \"SMS\",\r\n    \"AllowCancellation\": false,\r\n    \"CancellationWindow\": \"2h\",\r\n    \"CancellationCharges\": 20.0,\r\n    \"EnableLoyalty\": false,\r\n    \"IsActive\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services"
							]
						},
						"description": "This request will be used to add service details of a business."
					},
					"response": []
				},
				{
					"name": "Create one more",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SERVICE_ID_2\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"Cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.ServiceDuration).equals(\"30m\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(0.0);\r",
									"    pm.expect(jsonRes.Data.IsTaxable).equals(true);\r",
									"    pm.expect(jsonRes.Data.TaxRate).equals(30.0);\r",
									"    pm.expect(jsonRes.Data.PaymentRequired).equals(false);\r",
									"    pm.expect(jsonRes.Data.PaymentPercent).equals(25);\r",
									"    pm.expect(jsonRes.Data.PriorBookingWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.SendReminder).equals(true);\r",
									"    pm.expect(jsonRes.Data.ReminderWindow).equals(\"4h\");\r",
									"    pm.expect(jsonRes.Data.ReminderType).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.AllowCancellation).equals(false);\r",
									"    pm.expect(jsonRes.Data.CancellationWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.CancellationCharges).equals(20.0);\r",
									"    pm.expect(jsonRes.Data.EnableLoyalty).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_2}}\",\r\n    \"Name\": \"Cardiac Care\",\r\n    \"Description\": \"cardiac Care\",\r\n    \"ServiceDuration\": \"30m\",\r\n    \"Fees\": 0.0,\r\n    \"IsTaxable\": true,\r\n    \"TaxRate\": 30.0,\r\n    \"PaymentRequired\": false,\r\n    \"PaymentPercent\": 25,\r\n    \"PriorBookingWindow\": \"2h\",\r\n    \"SendReminder\": true,\r\n    \"ReminderWindow\": \"4h\",\r\n    \"ReminderType\": \"SMS\",\r\n    \"AllowCancellation\": false,\r\n    \"CancellationWindow\": \"2h\",\r\n    \"CancellationCharges\": 20.0,\r\n    \"EnableLoyalty\": false,\r\n    \"DisplayServicePicture\": \"null\",\r\n    \"IsActive\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services"
							]
						},
						"description": "This request will be used to add another service details of a business."
					},
					"response": []
				},
				{
					"name": "Create another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SERVICE_ID_3\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"Cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.ServiceDuration).equals(\"30m\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(0.0);\r",
									"    pm.expect(jsonRes.Data.IsTaxable).equals(true);\r",
									"    pm.expect(jsonRes.Data.TaxRate).equals(30.0);\r",
									"    pm.expect(jsonRes.Data.PaymentRequired).equals(false);\r",
									"    pm.expect(jsonRes.Data.PaymentPercent).equals(25);\r",
									"    pm.expect(jsonRes.Data.PriorBookingWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.SendReminder).equals(true);\r",
									"    pm.expect(jsonRes.Data.ReminderWindow).equals(\"4h\");\r",
									"    pm.expect(jsonRes.Data.ReminderType).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.AllowCancellation).equals(false);\r",
									"    pm.expect(jsonRes.Data.CancellationWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.CancellationCharges).equals(20.0);\r",
									"    pm.expect(jsonRes.Data.EnableLoyalty).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_3}}\",\r\n    \"Name\": \"Cardiac Care\",\r\n    \"Description\": \"cardiac Care\",\r\n    \"ServiceDuration\": \"30m\",\r\n    \"Fees\": 0.0,\r\n    \"IsTaxable\": true,\r\n    \"TaxRate\": 30.0,\r\n    \"PaymentRequired\": false,\r\n    \"PaymentPercent\": 25,\r\n    \"PriorBookingWindow\": \"2h\",\r\n    \"SendReminder\": true,\r\n    \"ReminderWindow\": \"4h\",\r\n    \"ReminderType\": \"SMS\",\r\n    \"AllowCancellation\": false,\r\n    \"CancellationWindow\": \"2h\",\r\n    \"CancellationCharges\": 20.0,\r\n    \"EnableLoyalty\": false,\r\n    \"DisplayServicePicture\": \"null\",\r\n    \"IsActive\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services"
							]
						},
						"description": "This request will be used to add another service details of a business."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-services/{{BUSINESS_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services",
								"{{BUSINESS_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to get service details of a business by Id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-services/search?name=Cardiac care",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services",
								"search"
							],
							"query": [
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Cardiac care"
								},
								{
									"key": "businessNodeId",
									"value": "{{BUSINESS_NODE_ID}}",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search service details of a business by applying search filters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SERVICE_ID_1\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Description\": \"Post trauma & injury rehabilitation\",\r\n    \"AllowCancellation\":true,\r\n    \"CancellationWindow\": \"5h\",\r\n    \"CancellationCharges\": 20.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-services/{{BUSINESS_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services",
								"{{BUSINESS_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to edit existing service details of a business by giving Id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-services/{{BUSINESS_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services",
								"{{BUSINESS_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to remove service details of a business by providing perticular id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SERVICE_ID\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ServiceDuration');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsTaxable');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TaxRate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentRequired');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PaymentPercent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('PriorBookingWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendReminder');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ReminderType');\r",
									"    pm.expect(jsonRes.Data).to.have.property('AllowCancellation');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationWindow');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancellationCharges');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EnableLoyalty');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"Cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"cardiac Care\");\r",
									"    pm.expect(jsonRes.Data.ServiceDuration).equals(\"30m\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(0.0);\r",
									"    pm.expect(jsonRes.Data.IsTaxable).equals(true);\r",
									"    pm.expect(jsonRes.Data.TaxRate).equals(30.0);\r",
									"    pm.expect(jsonRes.Data.PaymentRequired).equals(false);\r",
									"    pm.expect(jsonRes.Data.PaymentPercent).equals(25);\r",
									"    pm.expect(jsonRes.Data.PriorBookingWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.SendReminder).equals(true);\r",
									"    pm.expect(jsonRes.Data.ReminderWindow).equals(\"4h\");\r",
									"    pm.expect(jsonRes.Data.ReminderType).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.AllowCancellation).equals(false);\r",
									"    pm.expect(jsonRes.Data.CancellationWindow).equals(\"2h\");\r",
									"    pm.expect(jsonRes.Data.CancellationCharges).equals(20.0);\r",
									"    pm.expect(jsonRes.Data.EnableLoyalty).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"Name\": \"Cardiac Care\",\r\n    \"Description\": \"cardiac Care\",\r\n    \"ServiceDuration\": \"30m\",\r\n    \"Fees\": 0.0,\r\n    \"IsTaxable\": true,\r\n    \"TaxRate\": 30.0,\r\n    \"PaymentRequired\": false,\r\n    \"PaymentPercent\": 25,\r\n    \"PriorBookingWindow\": \"2h\",\r\n    \"SendReminder\": true,\r\n    \"ReminderWindow\": \"4h\",\r\n    \"ReminderType\": \"SMS\",\r\n    \"AllowCancellation\": false,\r\n    \"CancellationWindow\": \"2h\",\r\n    \"CancellationCharges\": 20.0,\r\n    \"EnableLoyalty\": false,\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-services"
							]
						},
						"description": "This request will be used to add service details of a business."
					},
					"response": []
				}
			],
			"description": "**APIs to manage the services offered by a business. These endpoints allow you to create, retrieve, update, delete, or search for services.**\n\nExample: Services provided by the hospital are the business service."
		},
		{
			"name": "Business-user-service",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SERVICE_ID_1\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\" : \"{{BUSINESS_USER_ID_1}}\",\r\n    \"BusinessServiceId\" : \"{{BUSINESS_SERVICE_ID_1}}\",\r\n    \"IsActive\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services"
							]
						},
						"description": "This request will be used to add user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Create multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SERVICE_ID_2\", jsonRes.Data.count);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('count');\r",
									"\r",
									"    pm.expect(jsonRes.Data.count).equals(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"records\": [\r\n        {\r\n            \"BusinessUserId\" : \"{{BUSINESS_USER_ID_3}}\",\r\n            \"BusinessServiceId\" : \"{{BUSINESS_SERVICE_ID_3}}\",\r\n            \"IsActive\" : true\r\n        },\r\n        {\r\n            \"BusinessUserId\" : \"{{BUSINESS_USER_ID_2}}\",\r\n            \"BusinessServiceId\" : \"{{BUSINESS_SERVICE_ID_2}}\",\r\n            \"IsActive\" : true\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-services/add-multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services",
								"add-multiple"
							]
						},
						"description": "This request will be used to add multiple user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-services/{{BUSINESS_USER_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services",
								"{{BUSINESS_USER_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to get user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-services/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services",
								"search"
							],
							"query": [
								{
									"key": "businessUserId",
									"value": "{{BUSINESS_USER_ID}}",
									"disabled": true
								},
								{
									"key": "businessServiceId",
									"value": "{{BUSINESS_SERVICE_ID}}",
									"disabled": true
								},
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\" : \"{{BUSINESS_USER_ID_2}}\",\r\n    \"IsActive\" : false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-services/{{BUSINESS_USER_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services",
								"{{BUSINESS_USER_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to edit user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-services/{{BUSINESS_USER_SERVICE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services",
								"{{BUSINESS_USER_SERVICE_ID_1}}"
							]
						},
						"description": "This request will be used to remove user Id and service Id of a business."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SERVICE_ID\", jsonRes.Data.id);   \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user service added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\" : \"{{BUSINESS_USER_ID}}\",\r\n    \"BusinessServiceId\" : \"{{BUSINESS_SERVICE_ID}}\",\r\n    \"IsActive\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-services",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-services"
							]
						},
						"description": "This request will be used to add another user Id and service Id of a business."
					},
					"response": []
				}
			],
			"description": "**APIs for linking business users to services they provide. These endpoints handle CRUD operations and search requests for business user-service relationships.**"
		},
		{
			"name": "Business-node-hours",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_HOUR_ID_1\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SPECIAL-DAY\");\r",
									"    pm.expect(jsonRes.Data.Day).equals(3);\r",
									"    pm.expect(jsonRes.Data.Date).equals(\"2023-08-12T16:43:41.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsOpen).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"Type\": \"SPECIAL-DAY\",\r\n    \"Day\": 3,\r\n    \"Date\": \"2023-08-12T16:43:41.000Z\",\r\n    \"IsOpen\": false,\r\n    \"IsActive\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours"
							]
						},
						"description": "This request will be used to add the hours of a business node."
					},
					"response": []
				},
				{
					"name": "Create multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_HOUR_ID\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour added successfully\", function () {\r",
									"    var responseArray = pm.response.json().Data;\r",
									"\r",
									"pm.test(\"Response array should not be empty\", () => {\r",
									"  pm.expect(responseArray.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"responseArray.forEach((items, index) => {\r",
									"    pm.test(`Object ${index + 1} should have required properties`, () => {\r",
									"        pm.expect(items).to.have.property('id');\r",
									"        pm.expect(items).to.have.property('BusinessNodeId');\r",
									"        pm.expect(items).to.have.property('CreatedAt');\r",
									"        pm.expect(items).to.have.property('Type');\r",
									"        pm.expect(items).to.have.property('Day');\r",
									"        pm.expect(items).to.have.property('Date');\r",
									"        pm.expect(items).to.have.property('IsOpen');\r",
									"        pm.expect(items).to.have.property('Message');\r",
									"        pm.expect(items).to.have.property('StartTime');\r",
									"        pm.expect(items).to.have.property('EndTime');\r",
									"        pm.expect(items).to.have.property('UpdatedAt');\r",
									"        pm.expect(items).to.have.property('IsActive');\r",
									"        pm.expect(items).to.have.property('IsDeleted');\r",
									"        pm.expect(items).to.have.property('DeletedAt');\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"DayWiseWorkingHours\": [\r\n\t\t{\r\n\t\t\t\"Day\": 1,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 2,\r\n\t\t\t\"StartTime\": \"09:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 3,\r\n\t\t\t\"StartTime\": \"09:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 4,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 5,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 6,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/add-multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"add-multiple"
							]
						},
						"description": "This request will be used to add multiple hours of a business node."
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDeleted');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/{{BUSINESS_NODE_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"{{BUSINESS_NODE_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to retrive the hours of a business node."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"search"
							],
							"query": [
								{
									"key": "businessNodeId",
									"value": "{{BUSINESS_NODE_ID}}",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search the hours of a business node."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDeleted');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"Type\": \"WEEKDAY\",\r\n    \"Day\": 1,\r\n    \"IsOpen\": true,\r\n    \"StartTime\":\"09:30:00\",\r\n    \"EndTime\":\"22:15:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/{{BUSINESS_NODE_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"{{BUSINESS_NODE_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to edit the hours of a business node."
					},
					"response": []
				},
				{
					"name": "Update multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour updated successfully\", function () {\r",
									"    var responseArray = pm.response.json().Data;\r",
									"    \r",
									"pm.test(\"Response array should not be empty\", () => {\r",
									"  pm.expect(responseArray.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"responseArray.forEach((items, index) => {\r",
									"    pm.test(`Object ${index + 1} should have required properties`, () => {\r",
									"        pm.expect(items).to.have.property('id');\r",
									"        pm.expect(items).to.have.property('BusinessNodeId');\r",
									"        pm.expect(items).to.have.property('CreatedAt');\r",
									"        pm.expect(items).to.have.property('Type');\r",
									"        pm.expect(items).to.have.property('Day');\r",
									"        pm.expect(items).to.have.property('Date');\r",
									"        pm.expect(items).to.have.property('IsOpen');\r",
									"        pm.expect(items).to.have.property('Message');\r",
									"        pm.expect(items).to.have.property('StartTime');\r",
									"        pm.expect(items).to.have.property('EndTime');\r",
									"        pm.expect(items).to.have.property('UpdatedAt');\r",
									"        pm.expect(items).to.have.property('IsActive');\r",
									"        pm.expect(items).to.have.property('IsDeleted');\r",
									"        pm.expect(items).to.have.property('DeletedAt');\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"DayWiseWorkingHours\": [\r\n\t\t{\r\n\t\t\t\"Day\": 1,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 2,\r\n\t\t\t\"IsOpen\": false\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 3,\r\n\t\t\t\"StartTime\": \"09:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 4,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 5,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 6,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/update-multiple/{{BUSINESS_NODE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"update-multiple",
								"{{BUSINESS_NODE_ID}}"
							]
						},
						"description": "This request will be used to edit multiple hours of a business node."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours/{{BUSINESS_NODE_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours",
								"{{BUSINESS_NODE_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to remove the hours of a business node."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_NODE_HOUR_ID_1\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business node hour added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SPECIAL-DAY\");\r",
									"    pm.expect(jsonRes.Data.Day).equals(3);\r",
									"    pm.expect(jsonRes.Data.Date).equals(\"2023-08-16T16:43:41.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsOpen).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_2}}\",\r\n    \"Type\": \"SPECIAL-DAY\",\r\n    \"Day\": 3,\r\n    \"Date\": \"2023-08-16T16:43:41.000Z\",\r\n    \"IsOpen\": false,\r\n    \"IsActive\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-node-hours",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-node-hours"
							]
						},
						"description": "This request will be used to add another hours of a business node."
					},
					"response": []
				}
			],
			"description": "**APIs to manage the operating hours of business nodes. These endpoints allow creating, retrieving, updating, deleting, or searching for node hours.**\n\nExample: Manage operating hours of pericular branch of that hospital."
		},
		{
			"name": "Business-user-hours",
			"item": [
				{
					"name": "Create for date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_HOUR_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    // pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SPECIAL-DAY\");\r",
									"    pm.expect(jsonRes.Data.Day).equals(5);\r",
									"    pm.expect(jsonRes.Data.Date).equals(\"2023-08-17T16:43:41.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsOpen).equals(true);\r",
									"    // pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID_2}}\",\r\n    \"Type\": \"SPECIAL-DAY\",\r\n    \"Day\": 5,\r\n    \"Date\": \"2023-08-17T16:43:41.000Z\",\r\n    \"IsOpen\": false\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours"
							]
						},
						"description": "This request will be used to add available user date of a business."
					},
					"response": []
				},
				{
					"name": "Create for week day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_HOUR_ID_2\", jsonRes.Data.id);\r",
									"   // pm.environment.set(\"BUSINESS_USER_ID_2\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"WEEK-DAY\");\r",
									"    pm.expect(jsonRes.Data.Day).equals(5);\r",
									"    pm.expect(jsonRes.Data.IsOpen).equals(true);\r",
									"    pm.expect(jsonRes.Data.StartTime).equals(\"08:00:00\");\r",
									"    pm.expect(jsonRes.Data.EndTime).equals(\"23:00:00\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID_2}}\",\r\n    \"Type\": \"WEEK-DAY\",\r\n    \"Day\": 5,\r\n    \"IsOpen\": false,\r\n    \"StartTime\": \"08:00:00\",\r\n    \"EndTime\": \"23:00:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours"
							]
						},
						"description": "This request will be used to add available week days of a user to that perticular business."
					},
					"response": []
				},
				{
					"name": "Create multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_HOUR_ID\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour added successfully\", function () {\r",
									"    var responseArray = pm.response.json().Data;\r",
									"\r",
									"pm.test(\"Response array should not be empty\", () => {\r",
									"  pm.expect(responseArray.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"responseArray.forEach((items, index) => {\r",
									"    pm.test(`Object ${index + 1} should have required properties`, () => {\r",
									"        pm.expect(items).to.have.property('id');\r",
									"        pm.expect(items).to.have.property('BusinessUserId');\r",
									"        pm.expect(items).to.have.property('Type');\r",
									"        pm.expect(items).to.have.property('Day');\r",
									"        pm.expect(items).to.have.property('Date');\r",
									"        pm.expect(items).to.have.property('IsOpen');\r",
									"        pm.expect(items).to.have.property('Message');\r",
									"        pm.expect(items).to.have.property('StartTime');\r",
									"        pm.expect(items).to.have.property('EndTime');\r",
									"        pm.expect(items).to.have.property('IsActive');\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID}}\",\r\n\t\"DayWiseWorkingHours\": [\r\n\t\t{\r\n\t\t\t\"Day\": 1,\r\n\t\t\t\"StartTime\": \"08:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 2,\r\n\t\t\t\"IsOpen\": false\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 3,\r\n\t\t\t\"StartTime\": \"09:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 4,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 5,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 6,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/add-multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"add-multiple"
							]
						},
						"description": "This request will be used to add multiple available week days of a user to that perticular business at a time."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/{{USER_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"{{USER_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to retrive available hours of a user to that perticular business by id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"search"
							],
							"query": [
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								},
								{
									"key": "businessUserId",
									"value": "{{BUSINESS_USER_ID}}",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search available hours of a user to that perticular business by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID_1}}\",\r\n    \"Type\": \"WEEK-DAY\",\r\n    \"Day\" : 5,\r\n    \"Date\": null,\r\n    \"IsOpen\" : false,\r\n    \"StartTime\": \"08:00:00\",\r\n    \"EndTime\": \"23:00:00\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/{{USER_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"{{USER_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to edit available hours of a user to that perticular business by id."
					},
					"response": []
				},
				{
					"name": "Update multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"DayWiseWorkingHours\": [\r\n\t\t{\r\n\t\t\t\"Day\": 1,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 2,\r\n\t\t\t\"IsOpen\": false\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 3,\r\n\t\t\t\"StartTime\": \"09:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 4,\r\n\t\t\t\"StartTime\": \"14:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 5,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Day\": 6,\r\n\t\t\t\"StartTime\": \"16:00:00\",\r\n\t\t\t\"EndTime\": \"22:00:00\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/update-multiple/{{BUSINESS_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"update-multiple",
								"{{BUSINESS_USER_ID}}"
							]
						},
						"description": "This request will be used to edit multiple hours of a user to that perticular business by id at a time."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours/{{USER_HOUR_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours",
								"{{USER_HOUR_ID_1}}"
							]
						},
						"description": "This request will be used to remove available hours of a user to that perticular business by id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_HOUR_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user hour added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Day');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Date');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsOpen');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SPECIAL-DAY\");\r",
									"    pm.expect(jsonRes.Data.Day).equals(5);\r",
									"    pm.expect(jsonRes.Data.Date).equals(\"2023-09-17T16:43:41.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsOpen).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID}}\",\r\n    \"Type\": \"SPECIAL-DAY\",\r\n    \"Day\": 5,\r\n    \"Date\": \"2023-09-17T16:43:41.000Z\",\r\n    \"IsOpen\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-hours",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-hours"
							]
						},
						"description": "This request will be used to add available hours of a user to that perticular business by id."
					},
					"response": []
				}
			],
			"description": "**APIs to manage working hours of business users. These endpoints allow CRUD operations and searching of user hours.**"
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"CUSTOMER_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BirthDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InAppUser');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.FirstName).equals(\"Tushar\");\r",
									"    pm.expect(jsonRes.Data.LastName).equals(\"Katakdound\");\r",
									"    pm.expect(jsonRes.Data.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Gender).equals(\"Male\");\r",
									"    pm.expect(jsonRes.Data.Prefix).equals(\"Mr\");\r",
									"    pm.expect(jsonRes.Data.BirthDate).equals(\"1993-02-02T00:00:00.000Z\");\r",
									"    pm.expect(jsonRes.Data.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.InAppUser).equals(true);\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"https://upload.wikimedia.org/wikipedia/en/2/2f/Jerry_Mouse.png\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\":\"Tushar\",\r\n    \"LastName\":\"Katakdound\",\r\n    \"Mobile\":\"{{PHONE_NUMBER}}\",\r\n    \"Email\":\"{{EMAIL}}\",\r\n    \"Gender\":\"Male\",\r\n    \"Prefix\":\"Mr\",\r\n    \"BirthDate\": \"1993-02-02\",\r\n    \"Address\":\"Pune\",\r\n    \"InAppUser\": true,\r\n    \"DisplayPicture\":\"https://upload.wikimedia.org/wikipedia/en/2/2f/Jerry_Mouse.png\",\r\n    \"IsActive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/customers",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "This request will be used to add customer details."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InAppUser');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/customers/{{CUSTOMER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers",
								"{{CUSTOMER_ID_1}}"
							]
						},
						"description": "This request will be used to retrive customer details by id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/customers/search?email={{EMAIL}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers",
								"search"
							],
							"query": [
								{
									"key": "email",
									"value": "{{EMAIL}}"
								},
								{
									"key": "name",
									"value": "tushar",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search customer details by search filters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InAppUser');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\":\"Tushar\",\r\n    \"LastName\":\"Katakdound\",\r\n    \"Mobile\":\"{{PHONE_NUMBER}}\",\r\n    \"Email\":\"{{EMAIL}}\",\r\n    \"Gender\":\"Male\",\r\n    \"Prefix\":\"Mr\",\r\n    \"Address\":\"Mumbai\",\r\n    \"InAppUser\": true,\r\n    \"DisplayPicture\":\"https://upload.wikimedia.org/wikipedia/en/2/2f/Jerry_Mouse.png\",\r\n    \"IsActive\":true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/customers/{{CUSTOMER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers",
								"{{CUSTOMER_ID_1}}"
							]
						},
						"description": "This request will be used to edit customer details by Id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ADMIN_JWT}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/customers/{{CUSTOMER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers",
								"{{CUSTOMER_ID_1}}"
							]
						},
						"description": "This request will be used to remove customer details by Id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"CUSTOMER_ID\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Customer added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('FirstName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('LastName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Mobile');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Email');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Gender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BirthDate');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Prefix');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Address');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InAppUser');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.FirstName).equals(\"Tushar\");\r",
									"    pm.expect(jsonRes.Data.LastName).equals(\"Katakdound\");\r",
									"    pm.expect(jsonRes.Data.Mobile).equals(pm.environment.get(\"PHONE_NUMBER\"));\r",
									"    pm.expect(jsonRes.Data.Email).equals(pm.environment.get(\"EMAIL\"));\r",
									"    pm.expect(jsonRes.Data.Gender).equals(\"Male\");\r",
									"    pm.expect(jsonRes.Data.Prefix).equals(\"Mr\");\r",
									"    pm.expect(jsonRes.Data.BirthDate).equals(\"1993-02-02T00:00:00.000Z\");\r",
									"    pm.expect(jsonRes.Data.Address).equals(\"Pune\");\r",
									"    pm.expect(jsonRes.Data.InAppUser).equals(true);\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"https://upload.wikimedia.org/wikipedia/en/2/2f/Jerry_Mouse.png\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var phonenumber = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();\r",
									"var rand = (Math.floor(Math.random() * 900000) + 100000).toString();\r",
									"pm.environment.set(\"PHONE_NUMBER\", phonenumber);\r",
									"pm.environment.set(\"EMAIL\", `client.${rand}@nodomain.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\":\"Tushar\",\r\n    \"LastName\":\"Katakdound\",\r\n    \"Mobile\":\"{{PHONE_NUMBER}}\",\r\n    \"Email\":\"{{EMAIL}}\",\r\n    \"Gender\":\"Male\",\r\n    \"Prefix\":\"Mr\",\r\n    \"BirthDate\": \"1993-02-02\",\r\n    \"Address\":\"Pune\",\r\n    \"InAppUser\": true,\r\n    \"DisplayPicture\":\"https://upload.wikimedia.org/wikipedia/en/2/2f/Jerry_Mouse.png\",\r\n    \"IsActive\":true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/customers",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "This request will be used to add customer details again."
					},
					"response": []
				}
			],
			"description": "**APIs for managing customer information. These endpoints cover creating, retrieving, updating, deleting, and searching customer records.**  \nExample: If **Hospital** is a business then **Patient** is nothing but a customer."
		},
		{
			"name": "Business-skill",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SKILL_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    //pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"some jgjhgj skill\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"the special skill nobody else has!\");\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"hcbjb\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"Name\": \"some jgjhgj skill\",\r\n    \"Description\": \"the special skill nobody else has!\",\r\n    \"DisplayPicture\": \"hcbjb\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills"
							]
						},
						"description": "This folder will be used to add business skills."
					},
					"response": []
				},
				{
					"name": "Create another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SKILL_ID_2\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    //pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"some jgjhgj skill\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"the special skill nobody else has!\");\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"hcbjb\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_2}}\",\r\n    \"Name\": \"some jgjhgj skill\",\r\n    \"Description\": \"the special skill nobody else has!\",\r\n    \"DisplayPicture\": \"hcbjb\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills"
							]
						},
						"description": "This folder will be used to add another business skills."
					},
					"response": []
				},
				{
					"name": "Create one more",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SKILL_ID_3\", jsonRes.Data.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"   // pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"some jgjhgj skill\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"the special skill nobody else has!\");\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"hcbjb\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_3}}\",\r\n    \"Name\": \"some jgjhgj skill\",\r\n    \"Description\": \"the special skill nobody else has!\",\r\n    \"DisplayPicture\": \"hcbjb\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills"
							]
						},
						"description": "This folder will be used to add another business skills."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"     pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-skills/{{BUSINESS_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills",
								"{{BUSINESS_SKILL_ID_1}}"
							]
						},
						"description": "This folder will be used to retrive business skills by Id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-skills/search?name=ski",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "ski"
								}
							]
						},
						"description": "This folder will be used to search business skills by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"     pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"Name\": \"some special skill\",\r\n    \"Description\": \"the special skill nobody else has!\",\r\n    \"DisplayPicture\": \"nj\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-skills/{{BUSINESS_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills",
								"{{BUSINESS_SKILL_ID_1}}"
							]
						},
						"description": "This folder will be used to edit business skills by Id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-skills/{{BUSINESS_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills",
								"{{BUSINESS_SKILL_ID_1}}"
							]
						},
						"description": "This folder will be used to remove business skills by Id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_SKILL_ID\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"   // pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Name');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Description');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Name).equals(\"some jgjhgj skill\");\r",
									"    pm.expect(jsonRes.Data.Description).equals(\"the special skill nobody else has!\");\r",
									"    pm.expect(jsonRes.Data.DisplayPicture).equals(\"hcbjb\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"Name\": \"some jgjhgj skill\",\r\n    \"Description\": \"the special skill nobody else has!\",\r\n    \"DisplayPicture\": \"hcbjb\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-skills"
							]
						},
						"description": "This folder will be used to add business skill."
					},
					"response": []
				}
			],
			"description": "**APIs to manage the skills required by a business. These endpoints allow CRUD operations and searching for skills.**"
		},
		{
			"name": "Business-user-skill",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SKILL_ID_1\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessSkillId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessSkillId\": \"{{BUSINESS_SKILL_ID_1}}\",\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID_1}}\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills"
							]
						},
						"description": "This request will be used to add user skills of a business."
					},
					"response": []
				},
				{
					"name": "Create multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SKILL_ID_2\", jsonRes.Data.count);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('count');\r",
									"\r",
									"    pm.expect(jsonRes.Data.count).equals(2);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"skills\" : [\r\n    {\r\n        \"BusinessUserId\" : \"{{BUSINESS_USER_ID_3}}\",\r\n        \"BusinessSkillId\" : \"{{BUSINESS_SKILL_ID_3}}\",\r\n        \"IsActive\" : true\r\n    },\r\n    {\r\n        \"BusinessUserId\" : \"{{BUSINESS_USER_ID_2}}\",\r\n        \"BusinessSkillId\" : \"{{BUSINESS_SKILL_ID_2}}\",\r\n        \"IsActive\" : true\r\n    }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills/add-multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills",
								"add-multiple"
							]
						},
						"description": "This request will be used to add multiple user skills of a business."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessSkillId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills/{{BUSINESS_USER_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills",
								"{{BUSINESS_USER_SKILL_ID_1}}"
							]
						},
						"description": "This request will be used to retrive user skills of a business by Id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills/search?businessSkillId={{BUSINESS_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills",
								"search"
							],
							"query": [
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								},
								{
									"key": "businessUserId",
									"value": "{{BUSINESS_USER_ID_1}}",
									"disabled": true
								},
								{
									"key": "businessSkillId",
									"value": "{{BUSINESS_SKILL_ID_1}}"
								}
							]
						},
						"description": "This request will be used to search user skills of a business by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessSkillId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessUserId\" : \"{{BUSINESS_USER_ID_2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills/{{BUSINESS_USER_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills",
								"{{BUSINESS_USER_SKILL_ID_1}}"
							]
						},
						"description": "This request will be used to edit user skills of a business by Id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills/{{BUSINESS_USER_SKILL_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills",
								"{{BUSINESS_USER_SKILL_ID_1}}"
							]
						},
						"description": "This request will be used to remove user skills of a business by Id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"BUSINESS_USER_SKILL_ID\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Business user skill added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessSkillId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessSkillId\": \"{{BUSINESS_SKILL_ID}}\",\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID}}\",\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business-user-skills",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business-user-skills"
							]
						},
						"description": "This request will be used to add user skills of a business by Id."
					},
					"response": []
				}
			],
			"description": "**APIs to associate skills with business users. Use these endpoints to create, retrieve, update, delete, or search for user skills.**"
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"NOTIFICATION_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRead');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Title).equals(\"ewjrwejrpojwep\");\r",
									"    pm.expect(jsonRes.Data.Body).equals(\"Your appointment is booked\");\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.IsRead).equals(true);\r",
									"    pm.expect(jsonRes.Data.TypeId).equals(1);\r",
									"    pm.expect(jsonRes.Data.Message).equals(\"Your appointment has been confirmed!\");\r",
									"    pm.expect(jsonRes.Data.IsSent).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID_1}}\",\r\n    \"Title\": \"ewjrwejrpojwep\",\r\n    \"Body\": \"Your appointment is booked\",\r\n    \"Type\": \"SMS\",\r\n    \"IsRead\": true,\r\n    \"TypeId\": 1,\r\n    \"Message\": \"Your appointment has been confirmed!\",\r\n    \"IsSent\": false,\r\n    \"IsActive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/notifications",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "This request will be used to add the appointment notification."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRead');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/notifications/{{NOTIFICATION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications",
								"{{NOTIFICATION_ID_1}}"
							]
						},
						"description": "This request will be used to retrive the appointment notification by Id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/notifications/search?businessNodeId={{BUSINESS_NODE_ID_1}}&customerId={{CUSTOMER_ID_1}}&isActive=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications",
								"search"
							],
							"query": [
								{
									"key": "businessNodeId",
									"value": "{{BUSINESS_NODE_ID_1}}"
								},
								{
									"key": "customerId",
									"value": "{{CUSTOMER_ID_1}}"
								},
								{
									"key": "isActive",
									"value": "true"
								}
							]
						},
						"description": "This request will be used to search the appointment notification by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRead');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Title\": \"Appointment with Dr. X\",\r\n    \"Body\": \"Your appointment is booked subject to payment\",\r\n    \"Type\": \"EMAIL\",\r\n    \"TypeId\": 2,\r\n    \"Message\": \"successful\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/notifications/{{NOTIFICATION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications",
								"{{NOTIFICATION_ID_1}}"
							]
						},
						"description": "This request will be used to edit the appointment notification by Id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/notifications/{{NOTIFICATION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications",
								"{{NOTIFICATION_ID_1}}"
							]
						},
						"description": "This request will be used to remove the appointment notification by Id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"NOTIFICATION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Notification added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Title');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRead');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Message');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Title).equals(\"ewjrwejrpojwep\");\r",
									"    pm.expect(jsonRes.Data.Body).equals(\"Your appointment is booked\");\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.IsRead).equals(true);\r",
									"    pm.expect(jsonRes.Data.TypeId).equals(1);\r",
									"    pm.expect(jsonRes.Data.Message).equals(\"Your appointment has been confirmed!\");\r",
									"    pm.expect(jsonRes.Data.IsSent).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID}}\",\r\n    \"Title\": \"ewjrwejrpojwep\",\r\n    \"Body\": \"Your appointment is booked\",\r\n    \"Type\": \"SMS\",\r\n    \"IsRead\": true,\r\n    \"TypeId\": 1,\r\n    \"Message\": \"Your appointment has been confirmed!\",\r\n    \"IsSent\": false,\r\n    \"IsActive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/notifications",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "This request will be used to add the appointment notification."
					},
					"response": []
				}
			],
			"description": "**APIs for managing notifications in the appointment system. These endpoints handle CRUD operations for notification entities.**"
		},
		{
			"name": "User-message",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_MESSAGE_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MessageId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Body).equals(\"Your appointment is booked\");\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.TypeId).equals(1);\r",
									"    pm.expect(jsonRes.Data.MessageId).equals(\"23\");\r",
									"    pm.expect(jsonRes.Data.IsSent).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\" : \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID_1}}\",\r\n    \"Body\": \"Your appointment is booked\",\r\n    \"Type\": \"SMS\",\r\n    \"TypeId\": 1,\r\n    \"MessageId\": \"23\",\r\n    \"IsSent\": false,\r\n    \"IsActive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages"
							]
						},
						"description": "This request will be used to create the user message."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MessageId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/user-messages/{{USER_MESSAGE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages",
								"{{USER_MESSAGE_ID_1}}"
							]
						},
						"description": "This request will be used to retrive the user message by id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/user-messages/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages",
								"search"
							],
							"query": [
								{
									"key": "businessNodeId",
									"value": "{{BUSINESS_NODE_ID}}",
									"disabled": true
								},
								{
									"key": "customerId",
									"value": "{{CUSTOMER_ID}}",
									"disabled": true
								},
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "This request will be used to search the user message by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MessageId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Body\": \"Your appointment is booked subject to payment\",\r\n    \"Type\": \"EMAIL\",\r\n    \"TypeId\": 1,\r\n    \"MessageId\": \"23\",\r\n    \"Error\": \"No\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-messages/{{USER_MESSAGE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages",
								"{{USER_MESSAGE_ID_1}}"
							]
						},
						"description": "This request will be used to edit the user message by id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/user-messages/{{USER_MESSAGE_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages",
								"{{USER_MESSAGE_ID_1}}"
							]
						},
						"description": "This request will be used to remove the user message by id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"USER_MESSAGE_ID\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"User message added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Body');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TypeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('MessageId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsSent');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Body).equals(\"Your appointment is booked\");\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"SMS\");\r",
									"    pm.expect(jsonRes.Data.TypeId).equals(1);\r",
									"    pm.expect(jsonRes.Data.MessageId).equals(\"23\");\r",
									"    pm.expect(jsonRes.Data.IsSent).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\" : \"{{BUSINESS_NODE_ID}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID}}\",\r\n    \"Body\": \"Your appointment is booked\",\r\n    \"Type\": \"SMS\",\r\n    \"TypeId\": 1,\r\n    \"MessageId\": \"23\",\r\n    \"IsSent\": false,\r\n    \"IsActive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-messages"
							]
						},
						"description": "This request will be used to add the user message ."
					},
					"response": []
				}
			],
			"description": "**APIs for managing messages between users. These endpoints allow sending, retrieving, and deleting user messages**."
		},
		{
			"name": "Payment-transaction",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PAYMENT_TRANSACTION_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment Transaction added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalAmount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Currency');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsComplete');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InitiatedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CompletedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.TotalAmount).equals(300.0);\r",
									"    pm.expect(jsonRes.Data.ExternalId).equals(\"21\");\r",
									"    pm.expect(jsonRes.Data.Currency).equals(\"INR\");\r",
									"    pm.expect(jsonRes.Data.Status).equals(null);\r",
									"    pm.expect(jsonRes.Data.IsComplete).equals(false);\r",
									"    // pm.expect(jsonRes.Data.InitiatedOn).equals(\"2023-08-07T03:19:34.000Z\");\r",
									"    // pm.expect(jsonRes.Data.CompletedOn).equals(\"2023-08-07T03:19:34.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_1}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID_1}}\",\r\n    //\"AppointmentId\" : \"{{APPOINTMENT_ID_1}}\",\r\n    \"TotalAmount\": 300.0,\r\n    \"ExternalId\": \"21\",\r\n    \"Currency\": \"INR\",\r\n    \"IsComplete\": false,\r\n    \"InitiatedOn\": \"2023-10-05T03:19:34.000Z\",\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions"
							]
						},
						"description": "This request will be used to add the payment details of a customer."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment Transaction retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalAmount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Currency');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsComplete');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InitiatedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CompletedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions/{{PAYMENT_TRANSACTION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions",
								"{{PAYMENT_TRANSACTION_ID_1}}"
							]
						},
						"description": "This request will be used to retrive the payment details of a customer by id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment transaction records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions/search?customerId={{CUSTOMER_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions",
								"search"
							],
							"query": [
								{
									"key": "appointmentId",
									"value": "{{APPOINTMENT_ID}}",
									"disabled": true
								},
								{
									"key": "customerId",
									"value": "{{CUSTOMER_ID_1}}"
								}
							]
						},
						"description": "This request will be used to search the payment details of a customer by search filter."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment Transaction updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalAmount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Currency');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsComplete');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InitiatedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CompletedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TotalAmount\": 500.0,\r\n    \"ExternalId\": \"334243413\",\r\n    \"Currency\": \"INR\",\r\n    \"Status\": \"initiated\",\r\n    \"IsComplete\": false,\r\n    \"InitiatedOn\": \"2023-08-07T03:19:34.064Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions/{{PAYMENT_TRANSACTION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions",
								"{{PAYMENT_TRANSACTION_ID_1}}"
							]
						},
						"description": "This request will be used to edit the payment details of a customer by id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment transaction deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions/{{PAYMENT_TRANSACTION_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions",
								"{{PAYMENT_TRANSACTION_ID_1}}"
							]
						},
						"description": "This request will be used to remove the payment details of a customer by id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"PAYMENT_TRANSACTION_ID\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment Transaction added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TotalAmount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ExternalId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Currency');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsComplete');\r",
									"    pm.expect(jsonRes.Data).to.have.property('InitiatedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CompletedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.TotalAmount).equals(300.0);\r",
									"    pm.expect(jsonRes.Data.ExternalId).equals(\"21\");\r",
									"    pm.expect(jsonRes.Data.Currency).equals(\"INR\");\r",
									"    pm.expect(jsonRes.Data.Status).equals(\"null\");\r",
									"    pm.expect(jsonRes.Data.IsComplete).equals(false);\r",
									"    // pm.expect(jsonRes.Data.InitiatedOn).equals(\"2023-08-07T03:19:34.000Z\");\r",
									"    // pm.expect(jsonRes.Data.CompletedOn).equals(\"2023-08-07T03:19:34.000Z\");\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID}}\",\r\n    \"TotalAmount\": 300.0,\r\n    \"ExternalId\": \"21\",\r\n    \"Currency\": \"INR\",\r\n    \"Status\": \"null\",\r\n    \"IsComplete\": false,\r\n    // \"InitiatedOn\": \"2023-08-10T03:19:34.000Z\",\r\n    // \"CompletedOn\": \"2023-08-10T03:19:34.000Z\",\r\n    \"IsActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment-transactions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment-transactions"
							]
						},
						"description": "This request will be used to add the payment details of a customer."
					},
					"response": []
				}
			],
			"description": "**APIs for managing payment transactions in the system. These endpoints handle CRUD operations and search functionality for transactions.**"
		},
		{
			"name": "Appointment-status",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"APPOINTMENT_STATUS_ID_1\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusColor');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCancellationStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsConfirmedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendNotification');\r",
									"    pm.expect(jsonRes.Data).to.have.property('NotificationText');\r",
									"     pm.expect(jsonRes.Data).to.have.property('SendSms');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SmsText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDashboardStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCompletedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsWalkinEntryStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Status).equals(\"PAID\");\r",
									"    pm.expect(jsonRes.Data.StatusColor).equals(\"#f9d232\");\r",
									"    pm.expect(jsonRes.Data.Sequence).equals(1);\r",
									"    pm.expect(jsonRes.Data.IsCancellationStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.IsConfirmedStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.SendNotification).equals(true);\r",
									"    pm.expect(jsonRes.Data.NotificationText).equals(\"Payment for appointment is received. Confirmation is pending.\");\r",
									"    pm.expect(jsonRes.Data.SendSms).equals(true);\r",
									"    pm.expect(jsonRes.Data.SmsText).equals(\"Payment for appointment is received. Confirmation is pending.\");\r",
									"    pm.expect(jsonRes.Data.IsDashboardStatus).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsCompletedStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.IsWalkinEntryStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"BusinessNodeId\": \"{{BUSINESS_NODE_ID_3}}\",\r\n\"Status\": \"PAID\",\r\n\"StatusCode\":  \"1\",\r\n\"StatusColor\":  \"#f9d232\",\r\n\"Sequence\":  1,\r\n\"IsCancellationStatus\" : false,\r\n\"SendNotification\":  true,\r\n\"NotificationText\":  \"Payment for appointment is received. Confirmation is pending.\",\r\n\"SendSms\":  true,\r\n\"SmsText\":  \"Payment for appointment is received. Confirmation is pending.\",\r\n\"IsDashboardStatus\": true,\r\n\"IsCompletedStatus\": false,\r\n\"IsWalkinEntryStatus\": false,\r\n\"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses"
							]
						},
						"description": "This request is used to add the status of a appointment."
					},
					"response": []
				},
				{
					"name": "Create Multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"APPOINTMENT_STATUS_ID\", jsonRes.Data.id); \r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status added successfully\", function () {\r",
									"    var responseArray = pm.response.json().Data;\r",
									"\r",
									"pm.test(\"Response array should not be empty\", () => {\r",
									"  pm.expect(responseArray.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"responseArray.forEach((items, index) => {\r",
									"    pm.test(`Object ${index + 1} should have required properties`, () => {\r",
									"        pm.expect(items).to.have.property('id');\r",
									"        pm.expect(items).to.have.property('BusinessNodeId');\r",
									"        pm.expect(items).to.have.property('Status');\r",
									"        pm.expect(items).to.have.property('StatusColor');\r",
									"        pm.expect(items).to.have.property('Sequence');\r",
									"        pm.expect(items).to.have.property('IsCancellationStatus');\r",
									"        pm.expect(items).to.have.property('IsConfirmedStatus');\r",
									"        pm.expect(items).to.have.property('SendNotification');\r",
									"        pm.expect(items).to.have.property('NotificationText');\r",
									"        pm.expect(items).to.have.property('SendSms');\r",
									"        pm.expect(items).to.have.property('SmsText');\r",
									"        pm.expect(items).to.have.property('IsDashboardStatus');\r",
									"        pm.expect(items).to.have.property('IsCompletedStatus');\r",
									"        pm.expect(items).to.have.property('IsWalkinEntryStatus');\r",
									"        pm.expect(items).to.have.property('IsActive');\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"Statuses\": [\r\n        {\r\n            \"Status\": \"PAID/CONFIRMATION PENDING\",\r\n            \"StatusCode\": \"1\",\r\n            \"Sequence\": 1,\r\n            \"StatusColor\": \"#f9d232\",\r\n            \"SendNotification\": true,\r\n            \"NotificationText\": \"Confirmation is pending. (Payment for appointment is received)\",\r\n            \"SendSms\": true,\r\n            \"SmsText\": \"Appointment confirmation is pending.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsCancellationStatus\": false,\r\n            \"IsWalkinEntryStatus\": false,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsActive\": true\r\n        },\r\n        {\r\n            \"Status\": \"CONFIRMED\",\r\n            \"StatusCode\": \"2\",\r\n            \"Sequence\": 2,\r\n            \"StatusColor\": \"#f9d232\",\r\n            \"SendNotification\": true,\r\n            \"NotificationText\": \"Confirmed\",\r\n            \"SendSms\": true,\r\n            \"SmsText\": \"Appointment confirmed.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsCancellationStatus\": false,\r\n            \"IsConfirmedStatus\": true,\r\n            \"IsWalkinEntryStatus\": false\r\n        },\r\n        {\r\n            \"Status\": \"IN-PROGRESS\",\r\n            \"StatusCode\": \"3\",\r\n            \"Sequence\": 3,\r\n            \"StatusColor\": \"#f9d242\",\r\n            \"SendNotification\": false,\r\n            \"NotificationText\": \"In progress\",\r\n            \"SendSms\": false,\r\n            \"SmsText\": \"Appointment in progress.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsCancellationStatus\": false,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsWalkinEntryStatus\": false\r\n        },\r\n        {\r\n            \"Status\": \"COMPLETED\",\r\n            \"StatusCode\": \"4\",\r\n            \"Sequence\": 4,\r\n            \"StatusColor\": \"#f9d242\",\r\n            \"SendNotification\": false,\r\n            \"NotificationText\": \"Completed\",\r\n            \"SendSms\": false,\r\n            \"SmsText\": \"Appointment is complete.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": true,\r\n            \"IsCancellationStatus\": false,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsWalkinEntryStatus\": false\r\n        },\r\n        {\r\n            \"Status\": \"CANCELLED\",\r\n            \"StatusCode\": \"5\",\r\n            \"Sequence\": 5,\r\n            \"StatusColor\": \"#f9d242\",\r\n            \"SendNotification\": false,\r\n            \"NotificationText\": \"Cancelled\",\r\n            \"SendSms\": false,\r\n            \"SmsText\": \"Appointment is Cancelled.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsCancellationStatus\": true,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsWalkinEntryStatus\": false\r\n        },\r\n        {\r\n            \"Status\": \"POSTPONED\",\r\n            \"StatusCode\": \"6\",\r\n            \"Sequence\": 6,\r\n            \"StatusColor\": \"#f9d242\",\r\n            \"SendNotification\": true,\r\n            \"NotificationText\": \"Appointment postponed\",\r\n            \"SendSms\": false,\r\n            \"SmsText\": \"Appointment is postponed.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsCancellationStatus\": true,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsWalkinEntryStatus\": false\r\n        },\r\n        {\r\n            \"Status\": \"WALK-IN\",\r\n            \"StatusCode\": \"7\",\r\n            \"Sequence\": 7,\r\n            \"StatusColor\": \"#f9d242\",\r\n            \"SendNotification\": true,\r\n            \"NotificationText\": \"Walk-in apppointment started\",\r\n            \"SendSms\": false,\r\n            \"SmsText\": \"Walk-in apppointment started.\",\r\n            \"IsDashboardStatus\": true,\r\n            \"IsCompletedStatus\": false,\r\n            \"IsConfirmedStatus\": false,\r\n            \"IsCancellationStatus\": false\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses/add-multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses",
								"add-multiple"
							]
						},
						"description": "This request is used to add multiple status of a appointments."
					},
					"response": []
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusColor');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCancellationStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsConfirmedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendNotification');\r",
									"    pm.expect(jsonRes.Data).to.have.property('NotificationText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendSms');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SmsText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDashboardStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCompletedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsWalkinEntryStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses/{{APPOINTMENT_STATUS_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses",
								"{{APPOINTMENT_STATUS_ID_1}}"
							]
						},
						"description": "This request is used to retrive the status of a appointment by id."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status records retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Items.length).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses",
								"search"
							]
						},
						"description": "This request is used to search the status of a appointment by search filters."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusColor');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCancellationStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsConfirmedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendNotification');\r",
									"    pm.expect(jsonRes.Data).to.have.property('NotificationText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendSms');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SmsText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDashboardStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCompletedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsWalkinEntryStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\" : \"{{BUSINESS_NODE_ID}}\",\r\n   // \"Sequence\" : 1\r\n    \"IsConfirmedStatus\" : true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses/{{APPOINTMENT_STATUS_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses",
								"{{APPOINTMENT_STATUS_ID_1}}"
							]
						},
						"description": "This request is used to edit the status of a appointment by id."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status deleted successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses/{{APPOINTMENT_STATUS_ID_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses",
								"{{APPOINTMENT_STATUS_ID_1}}"
							]
						},
						"description": "This request is used to delete the status of a appointment by id."
					},
					"response": []
				},
				{
					"name": "Create again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"APPOINTMENT_STATUS_ID_2\", jsonRes.Data.id);\r",
									"}\r",
									"\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment status added successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusColor');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Sequence');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCancellationStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsConfirmedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SendNotification');\r",
									"    pm.expect(jsonRes.Data).to.have.property('NotificationText');\r",
									"     pm.expect(jsonRes.Data).to.have.property('SendSms');\r",
									"    pm.expect(jsonRes.Data).to.have.property('SmsText');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsDashboardStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCompletedStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsWalkinEntryStatus');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"\r",
									"    pm.expect(jsonRes.Data.Status).equals(\"PAID\");\r",
									"    pm.expect(jsonRes.Data.StatusColor).equals(\"#f9d232\");\r",
									"    pm.expect(jsonRes.Data.Sequence).equals(1);\r",
									"    pm.expect(jsonRes.Data.IsCancellationStatus).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsConfirmedStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.SendNotification).equals(true);\r",
									"    pm.expect(jsonRes.Data.NotificationText).equals(\"Payment for appointment is received. Confirmation is pending.\");\r",
									"    pm.expect(jsonRes.Data.SendSms).equals(true);\r",
									"    pm.expect(jsonRes.Data.SmsText).equals(\"Payment for appointment is received. Confirmation is pending.\");\r",
									"    pm.expect(jsonRes.Data.IsDashboardStatus).equals(true);\r",
									"    pm.expect(jsonRes.Data.IsCompletedStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.IsWalkinEntryStatus).equals(false);\r",
									"    pm.expect(jsonRes.Data.IsActive).equals(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID_2}}\",\r\n    \"Status\": \"PAID\",\r\n    \"StatusCode\": \"1\",\r\n    \"StatusColor\": \"#f9d232\",\r\n    \"Sequence\": 1,\r\n    \"IsCancellationStatus\": true,\r\n    \"IsConfirmedStatus\": false,\r\n    \"SendNotification\": true,\r\n    \"NotificationText\": \"Payment for appointment is received. Confirmation is pending.\",\r\n    \"SendSms\": true,\r\n    \"SmsText\": \"Payment for appointment is received. Confirmation is pending.\",\r\n    \"IsDashboardStatus\": true,\r\n    \"IsCompletedStatus\": false,\r\n    \"IsWalkinEntryStatus\": false,\r\n    \"IsActive\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointment-statuses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointment-statuses"
							]
						},
						"description": "This request is used to create the status of a appointment."
					},
					"response": []
				}
			],
			"description": "**APIs for managing the statuses of appointments. These statuses help track the progress and lifecycle of an appointment.**"
		},
		{
			"name": "Appointment",
			"item": [
				{
					"name": "Find available slots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Find available slots\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/business/{{BUSINESS_ID}}/node/{{BUSINESS_NODE_ID}}/service/{{BUSINESS_SERVICE_ID}}/slots?fromDate=2024-02-01&toDate=2024-02-02&businessUserId={{BUSINESS_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"business",
								"{{BUSINESS_ID}}",
								"node",
								"{{BUSINESS_NODE_ID}}",
								"service",
								"{{BUSINESS_SERVICE_ID}}",
								"slots"
							],
							"query": [
								{
									"key": "fromDate",
									"value": "2024-02-01"
								},
								{
									"key": "toDate",
									"value": "2024-02-02"
								},
								{
									"key": "businessUserId",
									"value": "{{BUSINESS_USER_ID}}"
								}
							]
						},
						"description": "This request is used to find the available slots to book the appointment.\n\nNeed to provide From date and To date to see the available slots."
					},
					"response": []
				},
				{
					"name": "Find available slots for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Find available slots for user\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/businessUser/{{BUSINESS_USER_ID}}/slots?fromDate=2025-01-30&toDate=2025-01-30",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"businessUser",
								"{{BUSINESS_USER_ID}}",
								"slots"
							],
							"query": [
								{
									"key": "fromDate",
									"value": "2025-01-30"
								},
								{
									"key": "toDate",
									"value": "2025-01-30"
								}
							]
						},
						"description": "This request is used to find the available slots for user to book the appointment."
					},
					"response": []
				},
				{
					"name": "Book Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"APPOINTMENT_ID\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"DISPLAY_ID\", jsonRes.Data.DisplayId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is booked successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Note');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tax');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tip');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Discount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Total');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPaid');\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"IN-PERSON\");\r",
									"    pm.expect(jsonRes.Data.Note).equals(\"This is doctor appointment note\");\r",
									"    pm.expect(jsonRes.Data.StatusCode).equals(\"1\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(300);\r",
									"    pm.expect(jsonRes.Data.Tax).equals(10);\r",
									"    pm.expect(jsonRes.Data.Tip).equals(0);\r",
									"    pm.expect(jsonRes.Data.Discount).equals(0);\r",
									"    pm.expect(jsonRes.Data.Total).equals(310);\r",
									"    pm.expect(jsonRes.Data.IsPaid).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID}}\",\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID}}\",\r\n    \"BusinessServiceId\":\"{{BUSINESS_SERVICE_ID}}\",\r\n    \"StartTime\": \"2025-01-29T14:30:00Z\",\r\n    \"EndTime\": \"2025-01-29T15:00:00Z\",\r\n    \"Type\": \"IN-PERSON\",\r\n    \"Note\": \"This is doctor appointment note\",\r\n    \"StatusCode\": \"1\",\r\n    \"Fees\": 300,\r\n    \"Tax\": 10,\r\n    \"Tip\": 0,\r\n    \"Discount\": 0,\r\n    \"Total\": 310,\r\n    \"IsPaid\": true,\r\n    \"TransactionId\": \"{{PAYMENT_TRANSACTION_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointments/book",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"book"
							]
						},
						"description": "This request is used to book the appointment."
					},
					"response": []
				},
				{
					"name": "Book another appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.environment.set(\"APPOINTMENT_ID_1\", jsonRes.Data.id);\r",
									"    pm.environment.set(\"DISPLAY_ID_1\", jsonRes.Data.DisplayId);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment is booked successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Note');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tax');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tip');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Discount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Total');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPaid');\r",
									"    pm.expect(jsonRes.Data.Type).equals(\"IN-PERSON\");\r",
									"    pm.expect(jsonRes.Data.Note).equals(\"This is doctor appointment note\");\r",
									"    pm.expect(jsonRes.Data.StatusCode).equals(\"1\");\r",
									"    pm.expect(jsonRes.Data.Fees).equals(300);\r",
									"    pm.expect(jsonRes.Data.Tax).equals(10);\r",
									"    pm.expect(jsonRes.Data.Tip).equals(0);\r",
									"    pm.expect(jsonRes.Data.Discount).equals(0);\r",
									"    pm.expect(jsonRes.Data.Total).equals(330);\r",
									"    pm.expect(jsonRes.Data.IsPaid).equals(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessNodeId\": \"{{BUSINESS_NODE_ID}}\",\r\n    \"CustomerId\": \"{{CUSTOMER_ID}}\",\r\n    \"BusinessUserId\": \"{{BUSINESS_USER_ID}}\",\r\n    \"BusinessServiceId\":\"{{BUSINESS_SERVICE_ID}}\",\r\n    \"StartTime\": \"2025-02-31T08:30:00Z\",\r\n    \"EndTime\": \"2025-02-31T09:00:00Z\",\r\n    \"Type\": \"IN-PERSON\",\r\n    \"Note\": \"This is doctor appointment note\",\r\n    \"StatusCode\": \"1\",\r\n    \"Fees\": 300,\r\n    \"Tax\":10,\r\n    \"Tip\": 0,\r\n    \"Discount\": 0,\r\n    \"Total\": 330,\r\n    \"IsPaid\": true,\r\n    \"TransactionId\": \"{{PAYMENT_TRANSACTION_ID}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointments/book",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"book"
							]
						},
						"description": "This request is used to book the another appointment."
					},
					"response": []
				},
				{
					"name": "Get appointment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointments retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data).to.have.property('DisplayId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessNodeName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessUserName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('BusinessServiceName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerName');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerDob');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerGender');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CustomerDisplayPicture');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StartTimeUtc');\r",
									"    pm.expect(jsonRes.Data).to.have.property('EndTimeUtc');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Note');\r",
									"    pm.expect(jsonRes.Data).to.have.property('StatusCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tax');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Tip');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Discount');\r",
									"    pm.expect(jsonRes.Data).to.have.property('Total');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsPaid');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CouponCode');\r",
									"    pm.expect(jsonRes.Data).to.have.property('TransactionId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCompleted');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsConfirmed');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsCancelled');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CancelledOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('ConfirmedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('CompletedOn');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsRescheduled');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RescheduledAppointmentId');\r",
									"    pm.expect(jsonRes.Data).to.have.property('IsActive');\r",
									"    pm.expect(jsonRes.Data).to.have.property('RescheduledOn');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/{{APPOINTMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"{{APPOINTMENT_ID}}"
							]
						},
						"description": "This request is used to retrived the appointment details by Id."
					},
					"response": []
				},
				{
					"name": "Get by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment user retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    \r",
									"    jsonRes.Data.Appointments.forEach(function(appointment) {\r",
									"        pm.expect(appointment).to.have.property('id');\r",
									"        pm.expect(appointment).to.have.property('DisplayId');\r",
									"        pm.expect(appointment).to.have.property('BusinessNodeId');\r",
									"        pm.expect(appointment).to.have.property('CustomerId');\r",
									"        pm.expect(appointment).to.have.property('BusinessUserId');\r",
									"        pm.expect(appointment).to.have.property('BusinessServiceId');\r",
									"        pm.expect(appointment).to.have.property('StartTime');\r",
									"        pm.expect(appointment).to.have.property('EndTime');\r",
									"        pm.expect(appointment).to.have.property('Type');\r",
									"        pm.expect(appointment).to.have.property('Note');\r",
									"        pm.expect(appointment).to.have.property('StatusCode');\r",
									"        pm.expect(appointment).to.have.property('Fees');\r",
									"        pm.expect(appointment).to.have.property('Tax');\r",
									"        pm.expect(appointment).to.have.property('Tip');\r",
									"        pm.expect(appointment).to.have.property('Discount');\r",
									"        pm.expect(appointment).to.have.property('Total');\r",
									"        pm.expect(appointment).to.have.property('IsPaid');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/business-user/{{BUSINESS_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"business-user",
								"{{BUSINESS_USER_ID}}"
							]
						},
						"description": "This request is used to retrived the appointment details by user Id."
					},
					"response": []
				},
				{
					"name": "Get by node id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment user retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    \r",
									"    jsonRes.Data.Appointments.forEach(function(appointment) {\r",
									"        pm.expect(appointment).to.have.property('id');\r",
									"        pm.expect(appointment).to.have.property('DisplayId');\r",
									"        pm.expect(appointment).to.have.property('BusinessNodeId');\r",
									"        pm.expect(appointment).to.have.property('CustomerId');\r",
									"        pm.expect(appointment).to.have.property('BusinessUserId');\r",
									"        pm.expect(appointment).to.have.property('BusinessServiceId');\r",
									"        pm.expect(appointment).to.have.property('StartTime');\r",
									"        pm.expect(appointment).to.have.property('EndTime');\r",
									"        pm.expect(appointment).to.have.property('Type');\r",
									"        pm.expect(appointment).to.have.property('Note');\r",
									"        pm.expect(appointment).to.have.property('StatusCode');\r",
									"        pm.expect(appointment).to.have.property('Fees');\r",
									"        pm.expect(appointment).to.have.property('Tax');\r",
									"        pm.expect(appointment).to.have.property('Tip');\r",
									"        pm.expect(appointment).to.have.property('Discount');\r",
									"        pm.expect(appointment).to.have.property('Total');\r",
									"        pm.expect(appointment).to.have.property('IsPaid');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/business-node/{{BUSINESS_NODE_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"business-node",
								"{{BUSINESS_NODE_ID}}"
							]
						},
						"description": "This request is used to retrived the appointment details by node Id."
					},
					"response": []
				},
				{
					"name": "Get by customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment user retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    \r",
									"    jsonRes.Data.Appointments.forEach(function(appointment) {\r",
									"        pm.expect(appointment).to.have.property('id');\r",
									"        pm.expect(appointment).to.have.property('DisplayId');\r",
									"        pm.expect(appointment).to.have.property('BusinessNodeId');\r",
									"        pm.expect(appointment).to.have.property('CustomerId');\r",
									"        pm.expect(appointment).to.have.property('BusinessUserId');\r",
									"        pm.expect(appointment).to.have.property('BusinessServiceId');\r",
									"        pm.expect(appointment).to.have.property('StartTime');\r",
									"        pm.expect(appointment).to.have.property('EndTime');\r",
									"        pm.expect(appointment).to.have.property('Type');\r",
									"        pm.expect(appointment).to.have.property('Note');\r",
									"        pm.expect(appointment).to.have.property('StatusCode');\r",
									"        pm.expect(appointment).to.have.property('Fees');\r",
									"        pm.expect(appointment).to.have.property('Tax');\r",
									"        pm.expect(appointment).to.have.property('Tip');\r",
									"        pm.expect(appointment).to.have.property('Discount');\r",
									"        pm.expect(appointment).to.have.property('Total');\r",
									"        pm.expect(appointment).to.have.property('IsPaid');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/customer/{{CUSTOMER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"customer",
								"{{CUSTOMER_ID}}"
							],
							"query": [
								{
									"key": "show",
									"value": "future",
									"disabled": true
								}
							]
						},
						"description": "This request is used to retrived the appointment details by customer Id."
					},
					"response": []
				},
				{
					"name": "Get by display id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment user retrieved successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    var appointment = jsonRes.Data;\r",
									"\r",
									"    pm.expect(appointment).to.have.property('id');\r",
									"    pm.expect(appointment).to.have.property('DisplayId');\r",
									"    pm.expect(appointment).to.have.property('BusinessNodeId');\r",
									"    pm.expect(appointment).to.have.property('CustomerId');\r",
									"    pm.expect(appointment).to.have.property('BusinessUserId');\r",
									"    pm.expect(appointment).to.have.property('BusinessServiceId');\r",
									"    pm.expect(appointment).to.have.property('StartTime');\r",
									"    pm.expect(appointment).to.have.property('EndTime');\r",
									"    pm.expect(appointment).to.have.property('Type');\r",
									"    pm.expect(appointment).to.have.property('Note');\r",
									"    pm.expect(appointment).to.have.property('StatusCode');\r",
									"    pm.expect(appointment).to.have.property('Fees');\r",
									"    pm.expect(appointment).to.have.property('Tax');\r",
									"    pm.expect(appointment).to.have.property('Tip');\r",
									"    pm.expect(appointment).to.have.property('Discount');\r",
									"    pm.expect(appointment).to.have.property('Total');\r",
									"    pm.expect(appointment).to.have.property('IsPaid');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/by-display-id/{{DISPLAY_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"by-display-id",
								"{{DISPLAY_ID}}"
							]
						},
						"description": "This request is used to retrived the appointment details by display Id."
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"pm.test(\"Appointment updated successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('id');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('BusinessNodeId');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('CustomerId');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('BusinessUserId');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('BusinessServiceId');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('StartTime');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('EndTime');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Type');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Note');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('StatusCode');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Fees');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Tax');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Tip');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Discount');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('Total');\r",
									"    pm.expect(jsonRes.Data.Appointment).to.have.property('IsPaid');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TransactionId\": \"{{PAYMENT_TRANSACTION_ID}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/appointments/{{APPOINTMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"{{APPOINTMENT_ID}}"
							]
						},
						"description": "This request is used to edit the appointment details by Id."
					},
					"response": []
				},
				{
					"name": "Cancel appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment cancelled successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/cancel/{{APPOINTMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"cancel",
								"{{APPOINTMENT_ID}}"
							]
						},
						"description": "This request is used to cancel the appointment details by appointment Id."
					},
					"response": []
				},
				{
					"name": "Complete appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment completed successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/complete/{{APPOINTMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"complete",
								"{{APPOINTMENT_ID}}"
							]
						},
						"description": "This request is used to complete the appointment details by appointment Id."
					},
					"response": []
				},
				{
					"name": "Confirm appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Appointment confirmed successfully\", function () {\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes).to.have.property('Status');\r",
									"    pm.expect(jsonRes.Status).to.equal('success');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/appointments/confirm/{{APPOINTMENT_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"appointments",
								"confirm",
								"{{APPOINTMENT_ID}}"
							]
						},
						"description": "This request is used to confirm the appointment details by appointment Id."
					},
					"response": []
				}
			],
			"description": "**APIs for managing appointments. These endpoints allow CRUD operations and searching for appointments. Appointments are central to the service, linking customers, businesses, and services.**"
		}
	]
}